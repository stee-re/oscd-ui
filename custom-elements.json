{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "button/OscdFilledButton.spec.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestButton",
          "superclass": {
            "name": "Button",
            "module": "/button/OscdFilledButton.js"
          },
          "tagName": "test-button",
          "customElement": true,
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "soft-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is \"soft-disabled\" (disabled but still\nfocusable).\n\nUse this when a button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "fieldName": "softDisabled",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The URL that the link button points to.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the button is used as a link (`href` is set).",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Where to display the linked `href` URL for a link button. Common options\ninclude `_blank` to open in a new tab.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "trailing-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n\n_Note:_ Link buttons cannot have trailing icons.",
              "fieldName": "trailingIcon",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "has-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to display the icon or not.",
              "fieldName": "hasIcon",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ mode: 'open', delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "softDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is \"soft-disabled\" (disabled but still\nfocusable).\n\nUse this when a button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "attribute": "soft-disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The URL that the link button points to.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the button is used as a link (`href` is set).",
              "attribute": "download",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Where to display the linked `href` URL for a link button. Common options\ninclude `_blank` to open in a new tab.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n\n_Note:_ Link buttons cannot have trailing icons.",
              "attribute": "trailing-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to display the icon or not.",
              "attribute": "has-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "attribute": "type",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The associated form element with which this element's value will submit.",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedIcons",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderElevationOrOutline",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "test-button",
          "declaration": {
            "name": "TestButton",
            "module": "button/OscdFilledButton.spec.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "button/OscdFilledButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Buttons help people take action, such as sending an email, sharing a\ndocument, or liking a comment.\n\n__Emphasis:__ High emphasis – For the primary, most important, or most common\naction on a screen\n\n__Rationale:__ The filled button’s contrasting surface color makes it the\nmost prominent button after the FAB. It’s used for final or unblocking\nactions in a flow.\n\n__Example usages:__\n- Save\n- Confirm\n- Done",
          "name": "OscdFilledButton",
          "members": [
            {
              "kind": "method",
              "name": "renderElevationOrOutline",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ mode: 'open', delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "softDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is \"soft-disabled\" (disabled but still\nfocusable).\n\nUse this when a button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "attribute": "soft-disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The URL that the link button points to.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the button is used as a link (`href` is set).",
              "attribute": "download",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Where to display the linked `href` URL for a link button. Common options\ninclude `_blank` to open in a new tab.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n\n_Note:_ Link buttons cannot have trailing icons.",
              "attribute": "trailing-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to display the icon or not.",
              "attribute": "has-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "attribute": "type",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The associated form element with which this element's value will submit.",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedIcons",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fired when the user clicks the button.",
              "name": "click"
            }
          ],
          "superclass": {
            "name": "FilledButton",
            "package": "@material/web/button/internal/filled-button.js"
          },
          "tagName": "oscd-filled-button",
          "customElement": true,
          "summary": "Buttons help people take action, such as sending an email, sharing a\ndocument, or liking a comment.\n\n__Emphasis:__ High emphasis – For the primary, most important, or most common\naction on a screen\n\n__Rationale:__ The filled button’s contrasting surface color makes it the\nmost prominent button after the FAB. It’s used for final or unblocking\nactions in a flow.\n\n__Example usages:__\n- Save\n- Confirm\n- Done",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "soft-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is \"soft-disabled\" (disabled but still\nfocusable).\n\nUse this when a button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "fieldName": "softDisabled",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The URL that the link button points to.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the button is used as a link (`href` is set).",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Where to display the linked `href` URL for a link button. Common options\ninclude `_blank` to open in a new tab.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "trailing-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n\n_Note:_ Link buttons cannot have trailing icons.",
              "fieldName": "trailingIcon",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "has-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to display the icon or not.",
              "fieldName": "hasIcon",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdFilledButton",
          "declaration": {
            "name": "OscdFilledButton",
            "module": "button/OscdFilledButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "button/OscdOutlinedButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Buttons help people take action, such as sending an email, sharing a\ndocument, or liking a comment.\n\n__Emphasis:__ Medium emphasis – For important actions that don’t distract\nfrom other onscreen elements.\n\n__Rationale:__ Use an outlined button for actions that need attention but\naren’t the primary action, such as “See all” or “Add to cart.” This is also\nthe button to use for giving someone the opportunity to change their mind or\nescape a flow.\n\n__Example usages:__\n- Reply\n- View all\n- Add to cart\n- Take out of trash",
          "name": "OscdOutlinedButton",
          "members": [
            {
              "kind": "method",
              "name": "renderElevationOrOutline",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ mode: 'open', delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "softDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is \"soft-disabled\" (disabled but still\nfocusable).\n\nUse this when a button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "attribute": "soft-disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The URL that the link button points to.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the button is used as a link (`href` is set).",
              "attribute": "download",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Where to display the linked `href` URL for a link button. Common options\ninclude `_blank` to open in a new tab.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n\n_Note:_ Link buttons cannot have trailing icons.",
              "attribute": "trailing-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to display the icon or not.",
              "attribute": "has-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "attribute": "type",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The associated form element with which this element's value will submit.",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedIcons",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fired when the user clicks the button.",
              "name": "click"
            }
          ],
          "superclass": {
            "name": "OutlinedButton",
            "package": "@material/web/button/internal/outlined-button.js"
          },
          "tagName": "oscd-outlined-button",
          "customElement": true,
          "summary": "Buttons help people take action, such as sending an email, sharing a\ndocument, or liking a comment.\n\n__Emphasis:__ Medium emphasis – For important actions that don’t distract\nfrom other onscreen elements.\n\n__Rationale:__ Use an outlined button for actions that need attention but\naren’t the primary action, such as “See all” or “Add to cart.” This is also\nthe button to use for giving someone the opportunity to change their mind or\nescape a flow.\n\n__Example usages:__\n- Reply\n- View all\n- Add to cart\n- Take out of trash",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "soft-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is \"soft-disabled\" (disabled but still\nfocusable).\n\nUse this when a button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "fieldName": "softDisabled",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The URL that the link button points to.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the button is used as a link (`href` is set).",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Where to display the linked `href` URL for a link button. Common options\ninclude `_blank` to open in a new tab.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "trailing-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n\n_Note:_ Link buttons cannot have trailing icons.",
              "fieldName": "trailingIcon",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "has-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to display the icon or not.",
              "fieldName": "hasIcon",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdOutlinedButton",
          "declaration": {
            "name": "OscdOutlinedButton",
            "module": "button/OscdOutlinedButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "button/OscdTextButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Buttons help people take action, such as sending an email, sharing a\ndocument, or liking a comment.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence\n\n__Rationale:__ Text buttons have less visual prominence, so should be used\nfor low emphasis actions, such as an alternative option.\n\n__Example usages:__\n- Learn more\n- View all\n- Change account\n- Turn on",
          "name": "OscdTextButton",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ mode: 'open', delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is disabled.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "softDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is \"soft-disabled\" (disabled but still\nfocusable).\n\nUse this when a button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "attribute": "soft-disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The URL that the link button points to.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the button is used as a link (`href` is set).",
              "attribute": "download",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Where to display the linked `href` URL for a link button. Common options\ninclude `_blank` to open in a new tab.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n\n_Note:_ Link buttons cannot have trailing icons.",
              "attribute": "trailing-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to display the icon or not.",
              "attribute": "has-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "attribute": "type",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The associated form element with which this element's value will submit.",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedIcons",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderElevationOrOutline",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fired when the user clicks the button.",
              "name": "click"
            }
          ],
          "superclass": {
            "name": "TextButton",
            "package": "@material/web/button/internal/text-button.js"
          },
          "tagName": "oscd-text-button",
          "customElement": true,
          "summary": "Buttons help people take action, such as sending an email, sharing a\ndocument, or liking a comment.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence\n\n__Rationale:__ Text buttons have less visual prominence, so should be used\nfor low emphasis actions, such as an alternative option.\n\n__Example usages:__\n- Learn more\n- View all\n- Change account\n- Turn on",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is disabled.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "soft-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the button is \"soft-disabled\" (disabled but still\nfocusable).\n\nUse this when a button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "fieldName": "softDisabled",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The URL that the link button points to.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the button is used as a link (`href` is set).",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Where to display the linked `href` URL for a link button. Common options\ninclude `_blank` to open in a new tab.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "trailing-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n\n_Note:_ Link buttons cannot have trailing icons.",
              "fieldName": "trailingIcon",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "has-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to display the icon or not.",
              "fieldName": "hasIcon",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "Button",
                "module": "button/internal/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdTextButton",
          "declaration": {
            "name": "OscdTextButton",
            "module": "button/OscdTextButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "app-bar/OscdAppBar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A component that renders an app bar.\n\nThe app bar is a top-level navigation component that displays information and actions relating to the current screen.\nIt can contain a title, navigation icons, and action icons.\nThe app bar is typically used in conjunction with a navigation drawer or bottom navigation.",
          "name": "OscdAppBar",
          "cssProperties": [
            {
              "description": "The elevation level of the app bar.",
              "name": "--oscd-app-bar-elevation"
            },
            {
              "description": "The shadow color of the app bar.",
              "name": "--oscd-app-bar-shadow-color"
            },
            {
              "description": "The color of the app bar.",
              "name": "--oscd-app-bar-color"
            },
            {
              "description": "The background color of the app bar.",
              "name": "--oscd-app-bar-background-color"
            },
            {
              "description": "The font family of the app bar title.",
              "name": "--oscd-app-bar-title-font-family"
            },
            {
              "description": "The font size of the app bar title.",
              "name": "--oscd-app-bar-title-font-size"
            },
            {
              "description": "The line height of the app bar title.",
              "name": "--oscd-app-bar-title-line-height"
            },
            {
              "description": "The font weight of the app bar title.",
              "name": "--oscd-app-bar-title-font-weight"
            },
            {
              "description": "The color of the icon button in the app bar.",
              "name": "--md-icon-button-icon-color"
            }
          ],
          "slots": [
            {
              "description": "Slot for action icons at the start of the app bar.",
              "name": "actionStart"
            },
            {
              "description": "Slot for the title of the app bar.",
              "name": "title"
            },
            {
              "description": "Slot for action icons at the end of the app bar.",
              "name": "actionEnd"
            },
            {
              "description": "Slot for additional content which will appear immediately under the main app bar.",
              "name": "Default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "readonly": true
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "oscd-app-bar",
          "customElement": true,
          "summary": "A component that renders an app bar.\n\nThe app bar is a top-level navigation component that displays information and actions relating to the current screen.\nIt can contain a title, navigation icons, and action icons.\nThe app bar is typically used in conjunction with a navigation drawer or bottom navigation."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdAppBar",
          "declaration": {
            "name": "OscdAppBar",
            "module": "app-bar/OscdAppBar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dialog/OscdDialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Dialogs can require an action, communicate information, or help\nusers accomplish a task. There are two types of dialogs: basic and\nfull-screen.\n\nA dialog is a modal window that appears in front of app content to provide\ncritical information or ask for a decision. Dialogs disable all app\nfunctionality when they appear, and remain on screen until confirmed,\ndismissed, or a required action has been taken.\n\nDialogs are purposefully interruptive, so they should be used sparingly.\nA less disruptive alternative is to use a menu, which provides options\nwithout interrupting a user’s experience.\n\nOn mobile devices only, complex dialogs should be displayed fullscreen.\n\n__Example usages:__\n- Common use cases for basic dialogs include alerts, quick selection, and\nconfirmation.\n- More complex dialogs may contain actions that require a series of tasks\nto complete. One example is creating a calendar entry with the event title,\ndate, location, and time.",
          "name": "OscdDialog",
          "members": [
            {
              "kind": "field",
              "name": "open",
              "description": "Opens the dialog when set to `true` and closes it when set to `false`.",
              "attribute": "open",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "quick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Skips the opening and closing animations.",
              "attribute": "quick",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "returnValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Gets or sets the dialog's return value, usually to indicate which button\na user pressed to close it.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/returnValue",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'alert' | undefined"
              },
              "description": "The type of dialog for accessibility. Set this to `alert` to announce a\ndialog as an alert dialog.",
              "attribute": "type",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "noFocusTrap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables focus trapping, which by default keeps keyboard Tab navigation\nwithin the dialog.\n\nWhen disabled, after focusing the last element of a dialog, pressing Tab\nagain will release focus from the window back to the browser (such as the\nURL bar).\n\nFocus trapping is recommended for accessibility, and should not typically\nbe disabled. Only turn this off if the use case of a dialog is more\naccessible without focus trapping.",
              "attribute": "no-focus-trap",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "getOpenAnimation",
              "description": "Gets the opening animation for a dialog. Set to a new function to customize\nthe animation.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "getCloseAnimation",
              "description": "Gets the closing animation for a dialog. Set to a new function to customize\nthe animation.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "isOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "isOpening",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnectedPromiseResolve",
              "type": {
                "text": "() => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "isConnectedPromise",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLDialogElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "scrim",
              "type": {
                "text": "HTMLDialogElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLDialogElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "HTMLDialogElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "HTMLDialogElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "actions",
              "type": {
                "text": "HTMLDialogElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "isAtScrollTop",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "isAtScrollBottom",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "scroller",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "topAnchor",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "bottomAnchor",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "firstFocusTrap",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "nextClickIsFromContent",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "intersectionObserver",
              "type": {
                "text": "IntersectionObserver | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasHeadline",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasActions",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "cancelAnimations",
              "type": {
                "text": "AbortController | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "escapePressedWithoutCancel",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "treewalker",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Opens the dialog and fires a cancelable `open` event. After a dialog's\nanimation, an `opened` event is fired.\n\nAdd an `autofocus` attribute to a child of the dialog that should\nreceive focus after opening.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "parameters": [
                {
                  "name": "returnValue",
                  "default": "this.returnValue",
                  "description": "A return value usually indicating which button was used\nto close a dialog. If a dialog is canceled by clicking the scrim or\npressing Escape, it will not change the return value after closing."
                }
              ],
              "description": "Closes the dialog and fires a cancelable `close` event. After a dialog's\nanimation, a `closed` event is fired.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDialogClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleContentClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSubmit",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SubmitEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCancel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClose",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateDialog",
              "privacy": "private",
              "parameters": [
                {
                  "name": "animation",
                  "type": {
                    "text": "DialogAnimation"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleHeadlineChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleActionsChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleIconChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleAnchorIntersection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "entry",
                  "type": {
                    "text": "IntersectionObserverEntry"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "getIsConnectedPromise",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusTrapFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFirstAndLastFocusableChildren",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "| [HTMLElement, HTMLElement]\n    | [null, null]"
                }
              },
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            }
          ],
          "superclass": {
            "name": "Dialog",
            "package": "@material/web/dialog/internal/dialog.js"
          },
          "tagName": "oscd-dialog",
          "customElement": true,
          "summary": "Dialogs can require an action, communicate information, or help\nusers accomplish a task. There are two types of dialogs: basic and\nfull-screen.\n\nA dialog is a modal window that appears in front of app content to provide\ncritical information or ask for a decision. Dialogs disable all app\nfunctionality when they appear, and remain on screen until confirmed,\ndismissed, or a required action has been taken.\n\nDialogs are purposefully interruptive, so they should be used sparingly.\nA less disruptive alternative is to use a menu, which provides options\nwithout interrupting a user’s experience.\n\nOn mobile devices only, complex dialogs should be displayed fullscreen.\n\n__Example usages:__\n- Common use cases for basic dialogs include alerts, quick selection, and\nconfirmation.\n- More complex dialogs may contain actions that require a series of tasks\nto complete. One example is creating a calendar entry with the event title,\ndate, location, and time.",
          "attributes": [
            {
              "name": "open",
              "description": "Opens the dialog when set to `true` and closes it when set to `false`.",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "name": "quick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Skips the opening and closing animations.",
              "fieldName": "quick",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "'alert' | undefined"
              },
              "description": "The type of dialog for accessibility. Set this to `alert` to announce a\ndialog as an alert dialog.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "name": "no-focus-trap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables focus trapping, which by default keeps keyboard Tab navigation\nwithin the dialog.\n\nWhen disabled, after focusing the last element of a dialog, pressing Tab\nagain will release focus from the window back to the browser (such as the\nURL bar).\n\nFocus trapping is recommended for accessibility, and should not typically\nbe disabled. Only turn this off if the use case of a dialog is more\naccessible without focus trapping.",
              "fieldName": "noFocusTrap",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            }
          ],
          "events": [
            {
              "name": "open",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Dispatched when the dialog is opening before any animations.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "name": "opened",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Dispatched when the dialog has opened after any animations.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "name": "close",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Dispatched when the dialog is closing before any animations.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "name": "closed",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Dispatched when the dialog has closed after any animations.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            },
            {
              "name": "cancel",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Dispatched when the dialog has been canceled by clicking on the scrim or pressing Escape.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "dialog/internal/dialog.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdDialog",
          "declaration": {
            "name": "OscdDialog",
            "module": "dialog/OscdDialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "divider/OscdDivider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A divider is a thin line that groups content in lists and\ncontainers.\n\nDividers can reinforce tapability, such as when used to separate\nlist items or define tappable regions in an accordion.",
          "name": "OscdDivider",
          "members": [
            {
              "kind": "field",
              "name": "inset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indents the divider with equal padding on both sides.",
              "attribute": "inset",
              "reflects": true,
              "inheritedFrom": {
                "name": "Divider",
                "module": "divider/internal/divider.ts"
              }
            },
            {
              "kind": "field",
              "name": "insetStart",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indents the divider with padding on the leading side.",
              "attribute": "inset-start",
              "reflects": true,
              "inheritedFrom": {
                "name": "Divider",
                "module": "divider/internal/divider.ts"
              }
            },
            {
              "kind": "field",
              "name": "insetEnd",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indents the divider with padding on the trailing side.",
              "attribute": "inset-end",
              "reflects": true,
              "inheritedFrom": {
                "name": "Divider",
                "module": "divider/internal/divider.ts"
              }
            }
          ],
          "superclass": {
            "name": "Divider",
            "package": "@material/web/divider/internal/divider.js"
          },
          "tagName": "oscd-divider",
          "customElement": true,
          "summary": "A divider is a thin line that groups content in lists and\ncontainers.\n\nDividers can reinforce tapability, such as when used to separate\nlist items or define tappable regions in an accordion.",
          "attributes": [
            {
              "name": "inset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indents the divider with equal padding on both sides.",
              "fieldName": "inset",
              "inheritedFrom": {
                "name": "Divider",
                "module": "divider/internal/divider.ts"
              }
            },
            {
              "name": "inset-start",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indents the divider with padding on the leading side.",
              "fieldName": "insetStart",
              "inheritedFrom": {
                "name": "Divider",
                "module": "divider/internal/divider.ts"
              }
            },
            {
              "name": "inset-end",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indents the divider with padding on the trailing side.",
              "fieldName": "insetEnd",
              "inheritedFrom": {
                "name": "Divider",
                "module": "divider/internal/divider.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdDivider",
          "declaration": {
            "name": "OscdDivider",
            "module": "divider/OscdDivider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elevation/OscdElevation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `<oscd-elevation>` custom element with default styles.\n\nElevation is the relative distance between two surfaces along the z-axis.",
          "name": "OscdElevation",
          "members": [],
          "superclass": {
            "name": "Elevation",
            "package": "@material/web/elevation/internal/elevation.js"
          },
          "tagName": "oscd-elevation",
          "customElement": true,
          "summary": "The `<oscd-elevation>` custom element with default styles.\n\nElevation is the relative distance between two surfaces along the z-axis."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdElevation",
          "declaration": {
            "name": "OscdElevation",
            "module": "elevation/OscdElevation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "field/OscdFilledField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Material Design filled field component.",
          "name": "OscdFilledField",
          "members": [
            {
              "kind": "method",
              "name": "renderBackground",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStateLayer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderIndicator",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "error",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "noAsterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "no-asterisk",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "populated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "populated",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "resizable",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "supporting-text",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "error-text",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "attribute": "count",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "attribute": "max",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasStart",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the field has leading content.",
              "attribute": "has-start",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasEnd",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the field has trailing content.",
              "attribute": "has-end",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "slottedAriaDescribedBy",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "counterText",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingOrErrorText",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "isAnimating",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelAnimation",
              "type": {
                "text": "Animation | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "refreshErrorAlert",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "When set to true, the error text's `role=\"alert\"` will be removed, then\nre-added after an animation frame. This will re-announce an error message\nto screen readers.",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableTransitions",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "floatingLabelEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "restingLabelEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "containerEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "reannounceError",
              "description": "Re-announces the field's error supporting text to screen readers.\n\nError text announces to screen readers anytime it is visible and changes.\nUse the method to re-announce the message when the text has not changed,\nbut announcement is still needed (such as for `reportValidity()`).",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderOutline",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "floatingLabel",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSupportingText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSlottedAriaDescribedBy",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "isFloating",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateLabelIfNeeded",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    wasFocused,\n    wasPopulated,\n  }",
                  "type": {
                    "text": "{\n    wasFocused?: boolean;\n    wasPopulated?: boolean;\n  }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLabelKeyframes",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSurfacePositionClientRect",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            }
          ],
          "superclass": {
            "name": "FilledField",
            "package": "@material/web/field/internal/filled-field.js"
          },
          "tagName": "oscd-filled-field",
          "customElement": true,
          "summary": "A Material Design filled field component.",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "error",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "no-asterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "noAsterisk",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "populated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "populated",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "resizable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "resizable",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "supporting-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "supportingText",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "error-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "errorText",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "count",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "fieldName": "count",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "fieldName": "max",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "has-start",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the field has leading content.",
              "fieldName": "hasStart",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "has-end",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the field has trailing content.",
              "fieldName": "hasEnd",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdFilledField",
          "declaration": {
            "name": "OscdFilledField",
            "module": "field/OscdFilledField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "field/OscdOutlinedField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Material Design outlined field component.\nThis component is a wrapper around the `OutlinedField` from Material Web Components,\nproviding a scoped element that uses the `OscdOutlinedField` as its field.",
          "name": "OscdOutlinedField",
          "members": [
            {
              "kind": "method",
              "name": "renderOutline",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "floatingLabel",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "error",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "noAsterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "no-asterisk",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "populated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "populated",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "resizable",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "supporting-text",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "error-text",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "attribute": "count",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "attribute": "max",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasStart",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the field has leading content.",
              "attribute": "has-start",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasEnd",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the field has trailing content.",
              "attribute": "has-end",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "slottedAriaDescribedBy",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "counterText",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingOrErrorText",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "isAnimating",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelAnimation",
              "type": {
                "text": "Animation | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "refreshErrorAlert",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "When set to true, the error text's `role=\"alert\"` will be removed, then\nre-added after an animation frame. This will re-announce an error message\nto screen readers.",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableTransitions",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "floatingLabelEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "restingLabelEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "field",
              "name": "containerEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "reannounceError",
              "description": "Re-announces the field's error supporting text to screen readers.\n\nError text announces to screen readers anytime it is visible and changes.\nUse the method to re-announce the message when the text has not changed,\nbut announcement is still needed (such as for `reportValidity()`).",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderBackground",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStateLayer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderIndicator",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSupportingText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSlottedAriaDescribedBy",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "isFloating",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateLabelIfNeeded",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    wasFocused,\n    wasPopulated,\n  }",
                  "type": {
                    "text": "{\n    wasFocused?: boolean;\n    wasPopulated?: boolean;\n  }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getLabelKeyframes",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSurfacePositionClientRect",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            }
          ],
          "superclass": {
            "name": "OutlinedField",
            "package": "@material/web/field/internal/outlined-field.js"
          },
          "tagName": "oscd-outlined-field",
          "customElement": true,
          "summary": "A Material Design outlined field component.\nThis component is a wrapper around the `OutlinedField` from Material Web Components,\nproviding a scoped element that uses the `OscdOutlinedField` as its field.",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "error",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "no-asterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "noAsterisk",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "populated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "populated",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "resizable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "resizable",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "supporting-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "supportingText",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "error-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "errorText",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "count",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "fieldName": "count",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "fieldName": "max",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "has-start",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the field has leading content.",
              "fieldName": "hasStart",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            },
            {
              "name": "has-end",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the field has trailing content.",
              "fieldName": "hasEnd",
              "inheritedFrom": {
                "name": "Field",
                "module": "field/internal/field.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdOutlinedField",
          "declaration": {
            "name": "OscdOutlinedField",
            "module": "field/OscdOutlinedField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "icon/OscdIcon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An icon is a graphical representation of an object, action, or concept.\nIcons can be used to represent actions, such as \"add\" or \"delete\", or to\nrepresent objects, such as \"folder\" or \"file\".",
          "name": "OscdIcon",
          "members": [],
          "superclass": {
            "name": "Icon",
            "package": "@material/web/icon/internal/icon.js"
          },
          "tagName": "oscd-icon",
          "customElement": true,
          "summary": "An icon is a graphical representation of an object, action, or concept.\nIcons can be used to represent actions, such as \"add\" or \"delete\", or to\nrepresent objects, such as \"folder\" or \"file\"."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdIcon",
          "declaration": {
            "name": "OscdIcon",
            "module": "icon/OscdIcon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "list/OscdList.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Lists are continuous, vertical indexes of text or images.\n\nLists consist of one or more list items, and can contain actions represented\nby icons and text. List items come in three sizes: one-line, two-line, and\nthree-line.\n\n__Takeaways:__\n\n- Lists should be sorted in logical ways that make content easy to scan, such\nas alphabetical, numerical, chronological, or by user preference.\n- Lists present content in a way that makes it easy to identify a specific\nitem in a collection and act on it.\n- Lists should present icons, text, and actions in a consistent format.",
          "name": "OscdList",
          "members": [
            {
              "kind": "field",
              "name": "slotItems",
              "type": {
                "text": "Array<ListItem | (HTMLElement & {item?: ListItem})>"
              },
              "privacy": "protected",
              "description": "An array of activatable and disableable list items. Queries every assigned\nelement that has the `md-list-item` attribute.\n\n_NOTE:_ This is a shallow, flattened query via\n`HTMLSlotElement.queryAssignedElements` and thus will _only_ include direct\nchildren / directly slotted elements.",
              "inheritedFrom": {
                "name": "List",
                "module": "list/internal/list.ts"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "readonly": true,
              "inheritedFrom": {
                "name": "List",
                "module": "list/internal/list.ts"
              }
            },
            {
              "kind": "field",
              "name": "listController",
              "privacy": "private",
              "readonly": true,
              "default": "new ListController<ListItem>({ isItem: (item: HTMLElement): item is ListItem => item.hasAttribute('md-list-item'), getPossibleItems: () => this.slotItems, isRtl: () => getComputedStyle(this).direction === 'rtl', deactivateItem: (item) => { item.tabIndex = -1; }, activateItem: (item) => { item.tabIndex = 0; }, isNavigableKey: (key) => NAVIGABLE_KEY_SET.has(key), isActivatable: (item) => !item.disabled && item.type !== 'text', })",
              "inheritedFrom": {
                "name": "List",
                "module": "list/internal/list.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "List",
                "module": "list/internal/list.ts"
              }
            },
            {
              "kind": "method",
              "name": "activateNextItem",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Activates the next item in the list. If at the end of the list, the first\nitem will be activated.",
              "inheritedFrom": {
                "name": "List",
                "module": "list/internal/list.ts"
              }
            },
            {
              "kind": "method",
              "name": "activatePreviousItem",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Activates the previous item in the list. If at the start of the list, the\nlast item will be activated.",
              "inheritedFrom": {
                "name": "List",
                "module": "list/internal/list.ts"
              }
            }
          ],
          "superclass": {
            "name": "List",
            "package": "@material/web/list/internal/list.js"
          },
          "tagName": "oscd-list",
          "customElement": true,
          "summary": "Lists are continuous, vertical indexes of text or images.\n\nLists consist of one or more list items, and can contain actions represented\nby icons and text. List items come in three sizes: one-line, two-line, and\nthree-line.\n\n__Takeaways:__\n\n- Lists should be sorted in logical ways that make content easy to scan, such\nas alphabetical, numerical, chronological, or by user preference.\n- Lists present content in a way that makes it easy to identify a specific\nitem in a collection and act on it.\n- Lists should present icons, text, and actions in a consistent format."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdList",
          "declaration": {
            "name": "OscdList",
            "module": "list/OscdList.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "list/OscdListItem.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Lists are continuous, vertical indexes of text or images. Items are placed\ninside the list.\n\nLists consist of one or more list items, and can contain actions represented\nby icons and text. List items come in three sizes: one-line, two-line, and\nthree-line.\n\n__Takeaways:__\n\n- Lists should be sorted in logical ways that make content easy to scan, such\n  as alphabetical, numerical, chronological, or by user preference.\n- Lists present content in a way that makes it easy to identify a specific\n  item in a collection and act on it.\n- Lists should present icons, text, and actions in a consistent format.\n\nAcceptable slot child variants are:\n\n- `img[slot=end]`\n- `img[slot=start]`",
          "name": "OscdListItem",
          "members": [],
          "superclass": {
            "name": "ListItem",
            "package": "@material/web/list/internal/listitem/list-item.js"
          },
          "tagName": "oscd-list-item",
          "customElement": true,
          "summary": "Lists are continuous, vertical indexes of text or images. Items are placed\ninside the list.\n\nLists consist of one or more list items, and can contain actions represented\nby icons and text. List items come in three sizes: one-line, two-line, and\nthree-line.\n\n__Takeaways:__\n\n- Lists should be sorted in logical ways that make content easy to scan, such\n  as alphabetical, numerical, chronological, or by user preference.\n- Lists present content in a way that makes it easy to identify a specific\n  item in a collection and act on it.\n- Lists should present icons, text, and actions in a consistent format.\n\nAcceptable slot child variants are:\n\n- `img[slot=end]`\n- `img[slot=start]`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListItemType",
          "declaration": {
            "name": "ListItemType",
            "package": "@material/web/list/internal/listitem/list-item.js"
          }
        },
        {
          "kind": "js",
          "name": "OscdListItem",
          "declaration": {
            "name": "OscdListItem",
            "module": "list/OscdListItem.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "navigation-drawer/OscdNavigationDrawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Navigation drawers are temporary surfaces that display a list of\nchoices.",
          "name": "OscdNavigationDrawer",
          "members": [
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "opened",
              "inheritedFrom": {
                "name": "NavigationDrawerModal",
                "module": "labs/navigationdrawer/internal/navigation-drawer-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "pivot",
              "type": {
                "text": "'start' | 'end'"
              },
              "default": "'end'",
              "attribute": "pivot",
              "inheritedFrom": {
                "name": "NavigationDrawerModal",
                "module": "labs/navigationdrawer/internal/navigation-drawer-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "getScrimClasses",
              "privacy": "private",
              "inheritedFrom": {
                "name": "NavigationDrawerModal",
                "module": "labs/navigationdrawer/internal/navigation-drawer-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRenderClasses",
              "privacy": "private",
              "inheritedFrom": {
                "name": "NavigationDrawerModal",
                "module": "labs/navigationdrawer/internal/navigation-drawer-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "NavigationDrawerModal",
                "module": "labs/navigationdrawer/internal/navigation-drawer-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleScrimClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "NavigationDrawerModal",
                "module": "labs/navigationdrawer/internal/navigation-drawer-modal.ts"
              }
            }
          ],
          "superclass": {
            "name": "NavigationDrawerModal",
            "package": "@material/web/labs/navigationdrawer/internal/navigation-drawer-modal.js"
          },
          "tagName": "oscd-navigation-drawer",
          "customElement": true,
          "summary": "Navigation drawers are temporary surfaces that display a list of\nchoices.",
          "attributes": [
            {
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "opened",
              "inheritedFrom": {
                "name": "NavigationDrawerModal",
                "module": "labs/navigationdrawer/internal/navigation-drawer-modal.ts"
              }
            },
            {
              "name": "pivot",
              "type": {
                "text": "'start' | 'end'"
              },
              "default": "'end'",
              "fieldName": "pivot",
              "inheritedFrom": {
                "name": "NavigationDrawerModal",
                "module": "labs/navigationdrawer/internal/navigation-drawer-modal.ts"
              }
            }
          ],
          "events": [
            {
              "name": "navigation-drawer-changed",
              "type": {
                "text": "CustomEvent"
              },
              "description": "{CustomEvent<{opened: boolean}>} Dispatched whenever the drawer opens or closes --bubbles --composed",
              "inheritedFrom": {
                "name": "NavigationDrawerModal",
                "module": "labs/navigationdrawer/internal/navigation-drawer-modal.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdNavigationDrawer",
          "declaration": {
            "name": "OscdNavigationDrawer",
            "module": "navigation-drawer/OscdNavigationDrawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "navigation-drawer/OscdNavigationDrawerHeader.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A header for the navigation drawer.",
          "name": "OscdNavigationDrawerHeader",
          "members": [],
          "superclass": {
            "name": "ListItem",
            "package": "@material/web/list/internal/listitem/list-item.js"
          },
          "tagName": "oscd-navigation-drawer-header",
          "customElement": true,
          "summary": "A header for the navigation drawer."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdNavigationDrawerHeader",
          "declaration": {
            "name": "OscdNavigationDrawerHeader",
            "module": "navigation-drawer/OscdNavigationDrawerHeader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "menu/OscdMenu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Menus display a list of choices on a temporary surface.\n\nMenus appear when users interact with a button, action, or other control.\n\nThey can be opened from a variety of elements, most commonly icon buttons,\nbuttons, and text fields.\n\noscd-menu listens for the `close-menu` and `deselect-items` events.\n\n- `close-menu` closes the menu when dispatched from a child element.\n- `deselect-items` deselects all of its immediate menu-item children.",
          "name": "OscdMenu",
          "members": [
            {
              "kind": "field",
              "name": "surfaceEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "slotEl",
              "type": {
                "text": "HTMLSlotElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The ID of the element in the same root node in which the menu should align\nto. Overrides setting `anchorElement = elementReference`.\n\n__NOTE__: anchor or anchorElement must either be an HTMLElement or resolve\nto an HTMLElement in order for menu to open.",
              "attribute": "anchor",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "positioning",
              "type": {
                "text": "'absolute' | 'fixed' | 'document' | 'popover'"
              },
              "default": "'absolute'",
              "description": "Whether the positioning algorithm should calculate relative to the parent\nof the anchor element (`absolute`), relative to the window (`fixed`), or\nrelative to the document (`document`). `popover` will use the popover API\nto render the menu in the top-layer. If your browser does not support the\npopover API, it will fall back to `fixed`.\n\n__Examples for `position = 'fixed'`:__\n\n- If there is no `position:relative` in the given parent tree and the\n  surface is `position:absolute`\n- If the surface is `position:fixed`\n- If the surface is in the \"top layer\"\n- The anchor and the surface do not share a common `position:relative`\n  ancestor\n\nWhen using `positioning=fixed`, in most cases, the menu should position\nitself above most other `position:absolute` or `position:fixed` elements\nwhen placed inside of them. e.g. using a menu inside of an `md-dialog`.\n\n__NOTE__: Fixed menus will not scroll with the page and will be fixed to\nthe window instead.\n\n__Examples for `position = 'document'`:__\n\n- There is no parent that creates a relative positioning context e.g.\n  `position: relative`, `position: absolute`, `transform: translate(x, y)`,\n  etc.\n- You put the effort into hoisting the menu to the top of the DOM like the\n  end of the `<body>` to render over everything or in a top-layer.\n- You are reusing a single `md-menu` element that dynamically renders\n  content.\n\n__Examples for `position = 'popover'`:__\n\n- Your browser supports `popover`.\n- Most cases. Once popover is in browsers, this will become the default.",
              "attribute": "positioning",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "quick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Skips the opening and closing animations.",
              "attribute": "quick",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasOverflow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Displays overflow content like a submenu. Not required in most cases when\nusing `positioning=\"popover\"`.\n\n__NOTE__: This may cause adverse effects if you set\n`md-menu {max-height:...}`\nand have items overflowing items in the \"y\" direction.",
              "attribute": "has-overflow",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Opens the menu and makes it visible. Alternative to the `.show()` and\n`.close()` methods",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "xOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Offsets the menu's inline alignment from the anchor by the given number in\npixels. This value is direction aware and will follow the LTR / RTL\ndirection.\n\ne.g. LTR: positive -> right, negative -> left\n     RTL: positive -> left, negative -> right",
              "attribute": "x-offset",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "yOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Offsets the menu's block alignment from the anchor by the given number in\npixels.\n\ne.g. positive -> down, negative -> up",
              "attribute": "y-offset",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "noHorizontalFlip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disable the `flip` behavior that usually happens on the horizontal axis\nwhen the surface would render outside the viewport.",
              "attribute": "no-horizontal-flip",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "noVerticalFlip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disable the `flip` behavior that usually happens on the vertical axis when\nthe surface would render outside the viewport.",
              "attribute": "no-vertical-flip",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeaheadDelay",
              "default": "200",
              "description": "The max time between the keystrokes of the typeahead menu behavior before\nit clears the typeahead buffer.",
              "attribute": "typeahead-delay",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorCorner",
              "type": {
                "text": "Corner"
              },
              "description": "The corner of the anchor which to align the menu in the standard logical\nproperty style of <block>-<inline> e.g. `'end-start'`.\n\nNOTE: This value may not be respected by the menu positioning algorithm\nif the menu would render outisde the viewport.\nUse `no-horizontal-flip` or `no-vertical-flip` to force the usage of the value",
              "attribute": "anchor-corner",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuCorner",
              "type": {
                "text": "Corner"
              },
              "description": "The corner of the menu which to align the anchor in the standard logical\nproperty style of <block>-<inline> e.g. `'start-start'`.\n\nNOTE: This value may not be respected by the menu positioning algorithm\nif the menu would render outisde the viewport.\nUse `no-horizontal-flip` or `no-vertical-flip` to force the usage of the value",
              "attribute": "menu-corner",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "stayOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keeps the user clicks outside the menu.\n\nNOTE: clicking outside may still cause focusout to close the menu so see\n`stayOpenOnFocusout`.",
              "attribute": "stay-open-on-outside-click",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "stayOpenOnFocusout",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keeps the menu open when focus leaves the menu's composed subtree.\n\nNOTE: Focusout behavior will stop propagation of the focusout event. Set\nthis property to true to opt-out of menu's focusout handling altogether.",
              "attribute": "stay-open-on-focusout",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "skipRestoreFocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "After closing, does not restore focus to the last focused element before\nthe menu was opened.",
              "attribute": "skip-restore-focus",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultFocus",
              "type": {
                "text": "FocusState"
              },
              "description": "The element that should be focused by default once opened.\n\nNOTE: When setting default focus to 'LIST_ROOT', remember to change\n`tabindex` to `0` and change md-menu's display to something other than\n`display: contents` when necessary.",
              "attribute": "default-focus",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "noNavigationWrap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turns off navigation wrapping. By default, navigating past the end of the\nmenu items will wrap focus back to the beginning and vice versa. Use this\nfor ARIA patterns that do not wrap focus, like combobox.",
              "attribute": "no-navigation-wrap",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "slotItems",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeaheadActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSubmenu",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the current menu is a submenu and should not handle specific\nnavigation keys.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "pointerPath",
              "type": {
                "text": "EventTarget[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "The event path of the last window pointerdown event.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "isRepositioning",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Whether or not the menu is repositoining due to window / document resize",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "openCloseAnimationSignal",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "listController",
              "privacy": "private",
              "readonly": true,
              "default": "new ListController<MenuItem>({ isItem: (maybeItem: HTMLElement): maybeItem is MenuItem => { return maybeItem.hasAttribute('md-menu-item'); }, getPossibleItems: () => this.slotItems, isRtl: () => getComputedStyle(this).direction === 'rtl', deactivateItem: (item: MenuItem) => { item.selected = false; item.tabIndex = -1; }, activateItem: (item: MenuItem) => { item.selected = true; item.tabIndex = 0; }, isNavigableKey: (key: string) => { if (!this.isSubmenu) { return menuNavKeys.has(key); } const isRtl = getComputedStyle(this).direction === 'rtl'; // we want md-submenu to handle the submenu's left/right arrow exit // key so it can close the menu instead of navigate the list. // Therefore we need to include all keys but left/right arrow close // key const arrowOpen = isRtl ? NavigableKeys.ArrowLeft : NavigableKeys.ArrowRight; if (key === arrowOpen) { return true; } return submenuNavKeys.has(key); }, wrapNavigation: () => !this.noNavigationWrap, })",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "openDirection",
              "type": {
                "text": "'UP' | 'DOWN'"
              },
              "privacy": "private",
              "description": "Whether the menu is animating upwards or downwards when opening. This is\nhelpful for calculating some animation calculations.",
              "readonly": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastFocusedElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The element that was focused before the menu opened.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeaheadController",
              "default": "new TypeaheadController(() => { return { getItems: () => this.items, typeaheadBufferTime: this.typeaheadDelay, active: this.typeaheadActive, }; })",
              "description": "Handles typeahead navigation through the menu.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentAnchorElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "(HTMLElement & Partial<SurfacePositionTarget>) | null"
              },
              "description": "The element which the menu should align to. If `anchor` is set to a\nnon-empty idref string, then `anchorEl` will resolve to the element with\nthe given id in the same root node. Otherwise, `null`.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuPositionController",
              "privacy": "private",
              "readonly": true,
              "default": "new SurfacePositionController( this, () => { return { anchorCorner: this.anchorCorner, surfaceCorner: this.menuCorner, surfaceEl: this.surfaceEl, anchorEl: this.anchorElement, positioning: this.positioning === 'popover' ? 'document' : this.positioning, isOpen: this.open, xOffset: this.xOffset, yOffset: this.yOffset, disableBlockFlip: this.noVerticalFlip, disableInlineFlip: this.noHorizontalFlip, onOpen: this.onOpened, beforeClose: this.beforeClose, onClose: this.onClosed, // We can't resize components that have overflow like menus with // submenus because the overflow-y will show menu items / content // outside the bounds of the menu. Popover API fixes this because each // submenu is hoisted to the top-layer and are not considered overflow // content. repositionStrategy: this.hasOverflow && this.positioning !== 'popover' ? 'move' : 'resize', }; }, )",
              "description": "Handles positioning the surface and aligning it to the anchor as well as\nkeeping it in the viewport.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "MenuItem[]"
              },
              "description": "The menu items associated with this menu. The items must be `MenuItem`s and\nhave both the `md-menu-item` and `md-list-item` attributes.",
              "readonly": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "onWindowResize",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "getBoundingClientRect",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "getClientRects",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSurface",
              "privacy": "private",
              "description": "Renders the positionable surface element and its contents.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMenuItems",
              "privacy": "private",
              "description": "Renders the menu items' slot",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderElevation",
              "privacy": "private",
              "description": "Renders the elevation component.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSurfaceClasses",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ClassInfo"
                }
              },
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFocusout",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "captureKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "onOpened",
              "privacy": "private",
              "readonly": true,
              "description": "Saves the last focused element focuses the new element based on\n`defaultFocus`, and animates open.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "beforeClose",
              "privacy": "private",
              "readonly": true,
              "description": "Animates closed.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "onClosed",
              "privacy": "private",
              "readonly": true,
              "description": "Focuses the last focused element.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateOpen",
              "privacy": "private",
              "description": "Performs the opening animation:\n\nhttps://direct.googleplex.com/#/spec/295000003+271060003",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateClose",
              "privacy": "private",
              "description": "Performs the closing animation:\n\nhttps://direct.googleplex.com/#/spec/295000003+271060003",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "setUpGlobalEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "cleanUpGlobalEventListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "onWindowPointerdown",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "onDocumentClick",
              "privacy": "private",
              "readonly": true,
              "description": "We cannot listen to window click because Safari on iOS will not bubble a\nclick event on window if the item clicked is not a \"clickable\" item such as\n<body>",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "onCloseMenu",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "onDeactivateItems",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "onRequestActivation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDeactivateTypeahead",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "DeactivateTypeaheadEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleActivateTypeahead",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ActivateTypeaheadEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleStayOpenOnFocusout",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCloseOnFocusout",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "activateNextItem",
              "description": "Activates the next item in the menu. If at the end of the menu, the first\nitem will be activated.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "activatePreviousItem",
              "description": "Activates the previous item in the menu. If at the start of the menu, the\nlast item will be activated.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Repositions the menu if it is open.\n\nUseful for the case where document or window-positioned menus have their\nanchors moved while open.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            }
          ],
          "superclass": {
            "name": "Menu",
            "package": "@material/web/menu/internal/menu.js"
          },
          "tagName": "oscd-menu",
          "customElement": true,
          "summary": "Menus display a list of choices on a temporary surface.\n\nMenus appear when users interact with a button, action, or other control.\n\nThey can be opened from a variety of elements, most commonly icon buttons,\nbuttons, and text fields.\n\noscd-menu listens for the `close-menu` and `deselect-items` events.\n\n- `close-menu` closes the menu when dispatched from a child element.\n- `deselect-items` deselects all of its immediate menu-item children.",
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The ID of the element in the same root node in which the menu should align\nto. Overrides setting `anchorElement = elementReference`.\n\n__NOTE__: anchor or anchorElement must either be an HTMLElement or resolve\nto an HTMLElement in order for menu to open.",
              "fieldName": "anchor",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "positioning",
              "type": {
                "text": "'absolute' | 'fixed' | 'document' | 'popover'"
              },
              "default": "'absolute'",
              "description": "Whether the positioning algorithm should calculate relative to the parent\nof the anchor element (`absolute`), relative to the window (`fixed`), or\nrelative to the document (`document`). `popover` will use the popover API\nto render the menu in the top-layer. If your browser does not support the\npopover API, it will fall back to `fixed`.\n\n__Examples for `position = 'fixed'`:__\n\n- If there is no `position:relative` in the given parent tree and the\n  surface is `position:absolute`\n- If the surface is `position:fixed`\n- If the surface is in the \"top layer\"\n- The anchor and the surface do not share a common `position:relative`\n  ancestor\n\nWhen using `positioning=fixed`, in most cases, the menu should position\nitself above most other `position:absolute` or `position:fixed` elements\nwhen placed inside of them. e.g. using a menu inside of an `md-dialog`.\n\n__NOTE__: Fixed menus will not scroll with the page and will be fixed to\nthe window instead.\n\n__Examples for `position = 'document'`:__\n\n- There is no parent that creates a relative positioning context e.g.\n  `position: relative`, `position: absolute`, `transform: translate(x, y)`,\n  etc.\n- You put the effort into hoisting the menu to the top of the DOM like the\n  end of the `<body>` to render over everything or in a top-layer.\n- You are reusing a single `md-menu` element that dynamically renders\n  content.\n\n__Examples for `position = 'popover'`:__\n\n- Your browser supports `popover`.\n- Most cases. Once popover is in browsers, this will become the default.",
              "fieldName": "positioning",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "quick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Skips the opening and closing animations.",
              "fieldName": "quick",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "has-overflow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Displays overflow content like a submenu. Not required in most cases when\nusing `positioning=\"popover\"`.\n\n__NOTE__: This may cause adverse effects if you set\n`md-menu {max-height:...}`\nand have items overflowing items in the \"y\" direction.",
              "fieldName": "hasOverflow",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Opens the menu and makes it visible. Alternative to the `.show()` and\n`.close()` methods",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "x-offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Offsets the menu's inline alignment from the anchor by the given number in\npixels. This value is direction aware and will follow the LTR / RTL\ndirection.\n\ne.g. LTR: positive -> right, negative -> left\n     RTL: positive -> left, negative -> right",
              "fieldName": "xOffset",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "y-offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Offsets the menu's block alignment from the anchor by the given number in\npixels.\n\ne.g. positive -> down, negative -> up",
              "fieldName": "yOffset",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "no-horizontal-flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disable the `flip` behavior that usually happens on the horizontal axis\nwhen the surface would render outside the viewport.",
              "fieldName": "noHorizontalFlip",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "no-vertical-flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disable the `flip` behavior that usually happens on the vertical axis when\nthe surface would render outside the viewport.",
              "fieldName": "noVerticalFlip",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "typeahead-delay",
              "default": "DEFAULT_TYPEAHEAD_BUFFER_TIME",
              "description": "The max time between the keystrokes of the typeahead menu behavior before\nit clears the typeahead buffer.",
              "fieldName": "typeaheadDelay",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "anchor-corner",
              "type": {
                "text": "Corner"
              },
              "description": "The corner of the anchor which to align the menu in the standard logical\nproperty style of <block>-<inline> e.g. `'end-start'`.\n\nNOTE: This value may not be respected by the menu positioning algorithm\nif the menu would render outisde the viewport.\nUse `no-horizontal-flip` or `no-vertical-flip` to force the usage of the value",
              "fieldName": "anchorCorner",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "menu-corner",
              "type": {
                "text": "Corner"
              },
              "description": "The corner of the menu which to align the anchor in the standard logical\nproperty style of <block>-<inline> e.g. `'start-start'`.\n\nNOTE: This value may not be respected by the menu positioning algorithm\nif the menu would render outisde the viewport.\nUse `no-horizontal-flip` or `no-vertical-flip` to force the usage of the value",
              "fieldName": "menuCorner",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "stay-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keeps the user clicks outside the menu.\n\nNOTE: clicking outside may still cause focusout to close the menu so see\n`stayOpenOnFocusout`.",
              "fieldName": "stayOpenOnOutsideClick",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "stay-open-on-focusout",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keeps the menu open when focus leaves the menu's composed subtree.\n\nNOTE: Focusout behavior will stop propagation of the focusout event. Set\nthis property to true to opt-out of menu's focusout handling altogether.",
              "fieldName": "stayOpenOnFocusout",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "skip-restore-focus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "After closing, does not restore focus to the last focused element before\nthe menu was opened.",
              "fieldName": "skipRestoreFocus",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "default-focus",
              "type": {
                "text": "FocusState"
              },
              "description": "The element that should be focused by default once opened.\n\nNOTE: When setting default focus to 'LIST_ROOT', remember to change\n`tabindex` to `0` and change md-menu's display to something other than\n`display: contents` when necessary.",
              "fieldName": "defaultFocus",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "no-navigation-wrap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turns off navigation wrapping. By default, navigating past the end of the\nmenu items will wrap focus back to the beginning and vice versa. Use this\nfor ARIA patterns that do not wrap focus, like combobox.",
              "fieldName": "noNavigationWrap",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            }
          ],
          "events": [
            {
              "name": "opening",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Fired before the opening animation begins",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "closing",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Fired before the closing animation begins",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "name": "closed",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Fired once the menu is closed, after any animations",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            },
            {
              "description": "{Event} Fired once the menu is open, after any animations",
              "name": "opened",
              "inheritedFrom": {
                "name": "Menu",
                "module": "menu/internal/menu.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListItem",
          "declaration": {
            "name": "ListItem",
            "package": "@material/web/list/internal/list-navigation-helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "MenuItem",
          "declaration": {
            "name": "MenuItem",
            "package": "@material/web/menu/internal/controllers/menuItemController.js"
          }
        },
        {
          "kind": "js",
          "name": "CloseReason",
          "declaration": {
            "name": "CloseReason",
            "package": "@material/web/menu/internal/controllers/shared.js"
          }
        },
        {
          "kind": "js",
          "name": "FocusState",
          "declaration": {
            "name": "FocusState",
            "package": "@material/web/menu/internal/controllers/shared.js"
          }
        },
        {
          "kind": "js",
          "name": "CloseMenuEvent",
          "declaration": {
            "name": "CloseMenuEvent",
            "package": "@material/web/menu/internal/controllers/shared.js"
          }
        },
        {
          "kind": "js",
          "name": "Menu",
          "declaration": {
            "name": "Menu",
            "package": "@material/web/menu/internal/controllers/shared.js"
          }
        },
        {
          "kind": "js",
          "name": "Corner",
          "declaration": {
            "name": "Corner",
            "package": "@material/web/menu/internal/menu.js"
          }
        },
        {
          "kind": "js",
          "name": "OscdMenu",
          "declaration": {
            "name": "OscdMenu",
            "module": "menu/OscdMenu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "menu/OscdMenuItem.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Menus display a list of choices on a temporary surface.\n\nMenu items are the selectable choices within the menu. Menu items must\nimplement the `MenuItem` interface and also have the `Oscdmenu-item`\nattribute. Additionally menu items are list items so they must also have the\n`oscd-list-item` attribute.\n\nMenu items can control a menu by selectively firing the `close-menu` and\n`deselect-items` events.",
          "name": "OscdMenuItem",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the item and makes it non-selectable and non-interactive.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "MenuItemType"
              },
              "default": "'menuitem'",
              "description": "Sets the behavior and role of the menu item, defaults to \"menuitem\".",
              "attribute": "type",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute when `href` is\nset.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keeps the menu open if clicked or keyboard selected.",
              "attribute": "keep-open",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the item in the selected visual state when a submenu is opened.",
              "attribute": "selected",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "listItemRoot",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "headlineElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingTextElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultElements",
              "type": {
                "text": "Node[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeaheadText",
              "description": "The text that is selectable via typeahead. If not set, defaults to the\ninnerText of the item slotted into the `\"headline\"` slot.",
              "attribute": "typeahead-text",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuItemController",
              "privacy": "private",
              "readonly": true,
              "default": "new MenuItemController(this, { getHeadlineElements: () => { return this.headlineElements; }, getSupportingTextElements: () => { return this.supportingTextElements; }, getDefaultElements: () => { return this.defaultElements; }, getInteractiveElement: () => this.listItemRoot, })",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderListItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "the child content of the list item."
                }
              ],
              "description": "Renders the root list item.",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderRipple",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "description": "Handles rendering of the ripple element.",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFocusRing",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "description": "Handles rendering of the focus ring.",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRenderClasses",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "ClassInfo"
                }
              },
              "description": "Classes applied to the list item root.",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderBody",
              "privacy": "protected",
              "description": "Handles rendering the headline and supporting text.",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            }
          ],
          "superclass": {
            "name": "MenuItemEl",
            "package": "@material/web/menu/internal/menuitem/menu-item.js"
          },
          "tagName": "oscd-menu-item",
          "customElement": true,
          "summary": "Menus display a list of choices on a temporary surface.\n\nMenu items are the selectable choices within the menu. Menu items must\nimplement the `MenuItem` interface and also have the `Oscdmenu-item`\nattribute. Additionally menu items are list items so they must also have the\n`oscd-list-item` attribute.\n\nMenu items can control a menu by selectively firing the `close-menu` and\n`deselect-items` events.",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the item and makes it non-selectable and non-interactive.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "MenuItemType"
              },
              "default": "'menuitem'",
              "description": "Sets the behavior and role of the menu item, defaults to \"menuitem\".",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute when `href` is\nset.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "name": "keep-open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keeps the menu open if clicked or keyboard selected.",
              "fieldName": "keepOpen",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the item in the selected visual state when a submenu is opened.",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            },
            {
              "name": "typeahead-text",
              "description": "The text that is selectable via typeahead. If not set, defaults to the\ninnerText of the item slotted into the `\"headline\"` slot.",
              "fieldName": "typeaheadText",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            }
          ],
          "events": [
            {
              "description": "{CustomEvent<{initiator: SelectOption, reason: Reason, itemPath: SelectOption[]}>} Closes the encapsulating menu on closable interaction. --bubbles --composed",
              "name": "close-menu",
              "inheritedFrom": {
                "name": "MenuItemEl",
                "module": "menu/internal/menuitem/menu-item.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuItem",
          "declaration": {
            "name": "MenuItem",
            "package": "@material/web/menu/internal/controllers/menuItemController.js"
          }
        },
        {
          "kind": "js",
          "name": "CloseMenuEvent",
          "declaration": {
            "name": "CloseMenuEvent",
            "package": "@material/web/menu/internal/controllers/shared.js"
          }
        },
        {
          "kind": "js",
          "name": "OscdMenuItem",
          "declaration": {
            "name": "OscdMenuItem",
            "module": "menu/OscdMenuItem.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "select/OscdFilledSelect.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Select menus display a list of choices on temporary surfaces and display the\ncurrently selected menu item above the menu.\n\nThe select component allows users to choose a value from a fixed list of\navailable options. Composed of an interactive anchor button and a menu, it is\nanalogous to the native HTML `<select>` element. This is the \"filled\"\nvariant.",
          "name": "OscdFilledSelect",
          "members": [
            {
              "kind": "field",
              "name": "fieldTag",
              "type": {
                "text": "StaticValue"
              },
              "privacy": "protected",
              "readonly": true,
              "default": "literal`md-filled-field`",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "quick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Opens the menu synchronously with no animation.",
              "attribute": "quick",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the select is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "attribute": "error-text",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The floating label for the field.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "noAsterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the asterisk on the floating label, when the select is\nrequired.",
              "attribute": "no-asterisk",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Conveys additional information below the select, such as how it should\nbe used.",
              "attribute": "supporting-text",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets whether or not the select is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuPositioning",
              "type": {
                "text": "'absolute' | 'fixed' | 'popover'"
              },
              "default": "'popover'",
              "description": "Whether or not the underlying md-menu should be position: fixed to display\nin a top-level manner, or position: absolute.\n\nposition:fixed is useful for cases where select is inside of another\nelement with stacking context and hidden overflows such as `md-dialog`.",
              "attribute": "menu-positioning",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "clampMenuWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clamps the menu-width to the width of the select.",
              "attribute": "clamp-menu-width",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeaheadDelay",
              "default": "DEFAULT_TYPEAHEAD_BUFFER_TIME",
              "description": "The max time between the keystrokes of the typeahead select / menu behavior\nbefore it clears the typeahead buffer.",
              "attribute": "typeahead-delay",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasLeadingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a leading icon. Used for SSR.",
              "attribute": "has-leading-icon",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text to display in the field. Only set for SSR.",
              "attribute": "display-text",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuAlign",
              "type": {
                "text": "'start' | 'end'"
              },
              "default": "'start'",
              "description": "Whether the menu should be aligned to the start or the end of the select's\ntextbox.",
              "attribute": "menu-align",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the currently selected option.\n\nNote: For SSR, set `[selected]` on the requested option and `displayText`\nrather than setting `value` setting `value` will incur a DOM query.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "[VALUE]",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "description": "The index of the currently selected option.\n\nNote: For SSR, set `[selected]` on the requested option and `displayText`\nrather than setting `selectedIndex` setting `selectedIndex` will incur a\nDOM query.",
              "attribute": "selected-index",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "description": "Returns an array of selected options.\n\nNOTE: md-select only supports single selection.",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastUserSetValue",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "Used for initializing select when the user sets the `value` directly.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastUserSetSelectedIndex",
              "type": {
                "text": "number | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "Used for initializing select when the user sets the `selectedIndex`\ndirectly.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastSelectedOption",
              "type": {
                "text": "SelectOption | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "Used for `input` and `change` event change detection.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastSelectedOptionRecords",
              "type": {
                "text": "SelectOptionRecord[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Whether or not a native error has been reported via `reportValidity()`.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeErrorText",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "The validation message displayed from a native error via\n`reportValidity()`.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultFocus",
              "type": {
                "text": "FocusState"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "Field | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "Menu | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "leadingIcons",
              "type": {
                "text": "Element[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "prevOpen",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectWidth",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Selects an option given the value of the option, and updates MdSelect's\nvalue.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectIndex",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Selects an option given the index of the option, and updates MdSelect's\nvalue.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the select to its default value.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "[onReportValidity]",
              "parameters": [
                {
                  "name": "invalidEvent",
                  "type": {
                    "text": "Event | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRenderClasses",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ClassInfo"
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderField",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFieldContent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLeadingIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTrailingIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMenu",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMenuContent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handles opening the select on keydown and typahead selection when the menu\nis closed.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusout",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "description": "Handles closing the menu when the focus leaves the select's subtree.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedOptions",
              "privacy": "private",
              "description": "Gets a list of all selected select options as a list item record array.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValueAndDisplayText",
              "privacy": "private",
              "description": "Gets the selected options from the DOM, and updates the value and display\ntext to the first selected option's value and headline respectively.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleOpening",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Focuses and activates the last selected item upon opening, and resets other\nactive items.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "redispatchEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClosed",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCloseMenu",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CloseMenuEvent"
                  }
                }
              ],
              "description": "Determines the reason for closing, and updates the UI accordingly.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "SelectOption"
                  }
                }
              ],
              "description": "Selects a given option, deselects other options, and updates the UI.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleRequestSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ReturnType<typeof createRequestSelectionEvent>"
                  }
                }
              ],
              "description": "Handles updating selection when an option element requests selection via\nproperty / attribute change.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleRequestDeselection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ReturnType<typeof createRequestDeselectionEvent>"
                  }
                }
              ],
              "description": "Handles updating selection when an option element requests deselection via\nproperty / attribute change.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "initUserSelection",
              "privacy": "private",
              "description": "Attempts to initialize the selected option from user-settable values like\nSSR, setting `value`, or `selectedIndex` at startup.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleIconChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "dispatchInteractionEvents",
              "privacy": "private",
              "description": "Dispatches the `input` and `change` events.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getErrorText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "[getFormValue]",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "[createValidator]",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "[getValidityAnchor]",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            }
          ],
          "superclass": {
            "name": "FilledSelect",
            "package": "@material/web/select/internal/filled-select.js"
          },
          "tagName": "oscd-filled-select",
          "customElement": true,
          "summary": "Select menus display a list of choices on temporary surfaces and display the\ncurrently selected menu item above the menu.\n\nThe select component allows users to choose a value from a fixed list of\navailable options. Composed of an interactive anchor button and a menu, it is\nanalogous to the native HTML `<select>` element. This is the \"filled\"\nvariant.",
          "attributes": [
            {
              "name": "quick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Opens the menu synchronously with no animation.",
              "fieldName": "quick",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the select is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "error-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "fieldName": "errorText",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The floating label for the field.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "no-asterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the asterisk on the floating label, when the select is\nrequired.",
              "fieldName": "noAsterisk",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "supporting-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Conveys additional information below the select, such as how it should\nbe used.",
              "fieldName": "supportingText",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets whether or not the select is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "fieldName": "error",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "menu-positioning",
              "type": {
                "text": "'absolute' | 'fixed' | 'popover'"
              },
              "default": "'popover'",
              "description": "Whether or not the underlying md-menu should be position: fixed to display\nin a top-level manner, or position: absolute.\n\nposition:fixed is useful for cases where select is inside of another\nelement with stacking context and hidden overflows such as `md-dialog`.",
              "fieldName": "menuPositioning",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "clamp-menu-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clamps the menu-width to the width of the select.",
              "fieldName": "clampMenuWidth",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "typeahead-delay",
              "default": "DEFAULT_TYPEAHEAD_BUFFER_TIME",
              "description": "The max time between the keystrokes of the typeahead select / menu behavior\nbefore it clears the typeahead buffer.",
              "fieldName": "typeaheadDelay",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "has-leading-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a leading icon. Used for SSR.",
              "fieldName": "hasLeadingIcon",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "display-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text to display in the field. Only set for SSR.",
              "fieldName": "displayText",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "menu-align",
              "type": {
                "text": "'start' | 'end'"
              },
              "default": "'start'",
              "description": "Whether the menu should be aligned to the start or the end of the select's\ntextbox.",
              "fieldName": "menuAlign",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the currently selected option.\n\nNote: For SSR, set `[selected]` on the requested option and `displayText`\nrather than setting `value` setting `value` will incur a DOM query.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "selected-index",
              "type": {
                "text": "number"
              },
              "description": "The index of the currently selected option.\n\nNote: For SSR, set `[selected]` on the requested option and `displayText`\nrather than setting `selectedIndex` setting `selectedIndex` will incur a\nDOM query.",
              "fieldName": "selectedIndex",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "Event"
              },
              "description": "{InputEvent} The native `input` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event) --bubbles --composed",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "{Event} The native `change` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event) --bubbles",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "description": "{Event} Fired when the select's menu is about to open.",
              "name": "opening",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "description": "{Event} Fired when the select's menu has finished animations and opened.",
              "name": "opened",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "description": "{Event} Fired when the select's menu is about to close.",
              "name": "closing",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "description": "{Event} Fired when the select's menu has finished animations and closed.",
              "name": "closed",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdFilledSelect",
          "declaration": {
            "name": "OscdFilledSelect",
            "module": "select/OscdFilledSelect.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "select/OscdOutlinedSelect.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Select menus display a list of choices on temporary surfaces and display the\ncurrently selected menu item above the menu.\n\nThe select component allows users to choose a value from a fixed list of\navailable options. Composed of an interactive anchor button and a menu, it is\nanalogous to the native HTML `<select>` element. This is the \"outlined\"\nvariant.",
          "name": "OscdOutlinedSelect",
          "members": [
            {
              "kind": "field",
              "name": "fieldTag",
              "type": {
                "text": "StaticValue"
              },
              "privacy": "protected",
              "readonly": true,
              "default": "literal`md-outlined-field`",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "quick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Opens the menu synchronously with no animation.",
              "attribute": "quick",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the select is required.",
              "attribute": "required",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "attribute": "error-text",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The floating label for the field.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "noAsterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the asterisk on the floating label, when the select is\nrequired.",
              "attribute": "no-asterisk",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Conveys additional information below the select, such as how it should\nbe used.",
              "attribute": "supporting-text",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets whether or not the select is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuPositioning",
              "type": {
                "text": "'absolute' | 'fixed' | 'popover'"
              },
              "default": "'popover'",
              "description": "Whether or not the underlying md-menu should be position: fixed to display\nin a top-level manner, or position: absolute.\n\nposition:fixed is useful for cases where select is inside of another\nelement with stacking context and hidden overflows such as `md-dialog`.",
              "attribute": "menu-positioning",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "clampMenuWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clamps the menu-width to the width of the select.",
              "attribute": "clamp-menu-width",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeaheadDelay",
              "default": "DEFAULT_TYPEAHEAD_BUFFER_TIME",
              "description": "The max time between the keystrokes of the typeahead select / menu behavior\nbefore it clears the typeahead buffer.",
              "attribute": "typeahead-delay",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasLeadingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a leading icon. Used for SSR.",
              "attribute": "has-leading-icon",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text to display in the field. Only set for SSR.",
              "attribute": "display-text",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuAlign",
              "type": {
                "text": "'start' | 'end'"
              },
              "default": "'start'",
              "description": "Whether the menu should be aligned to the start or the end of the select's\ntextbox.",
              "attribute": "menu-align",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the currently selected option.\n\nNote: For SSR, set `[selected]` on the requested option and `displayText`\nrather than setting `value` setting `value` will incur a DOM query.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "[VALUE]",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "description": "The index of the currently selected option.\n\nNote: For SSR, set `[selected]` on the requested option and `displayText`\nrather than setting `selectedIndex` setting `selectedIndex` will incur a\nDOM query.",
              "attribute": "selected-index",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "description": "Returns an array of selected options.\n\nNOTE: md-select only supports single selection.",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastUserSetValue",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "Used for initializing select when the user sets the `value` directly.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastUserSetSelectedIndex",
              "type": {
                "text": "number | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "Used for initializing select when the user sets the `selectedIndex`\ndirectly.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastSelectedOption",
              "type": {
                "text": "SelectOption | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "Used for `input` and `change` event change detection.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "lastSelectedOptionRecords",
              "type": {
                "text": "SelectOptionRecord[]"
              },
              "privacy": "private",
              "default": "[]",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Whether or not a native error has been reported via `reportValidity()`.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeErrorText",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "The validation message displayed from a native error via\n`reportValidity()`.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultFocus",
              "type": {
                "text": "FocusState"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "Field | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "Menu | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "leadingIcons",
              "type": {
                "text": "Element[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "prevOpen",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectWidth",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Selects an option given the value of the option, and updates MdSelect's\nvalue.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectIndex",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Selects an option given the index of the option, and updates MdSelect's\nvalue.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the select to its default value.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "[onReportValidity]",
              "parameters": [
                {
                  "name": "invalidEvent",
                  "type": {
                    "text": "Event | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRenderClasses",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ClassInfo"
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderField",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFieldContent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLeadingIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTrailingIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMenu",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMenuContent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handles opening the select on keydown and typahead selection when the menu\nis closed.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusout",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "description": "Handles closing the menu when the focus leaves the select's subtree.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedOptions",
              "privacy": "private",
              "description": "Gets a list of all selected select options as a list item record array.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValueAndDisplayText",
              "privacy": "private",
              "description": "Gets the selected options from the DOM, and updates the value and display\ntext to the first selected option's value and headline respectively.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleOpening",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Focuses and activates the last selected item upon opening, and resets other\nactive items.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "redispatchEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClosed",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCloseMenu",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CloseMenuEvent"
                  }
                }
              ],
              "description": "Determines the reason for closing, and updates the UI accordingly.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "SelectOption"
                  }
                }
              ],
              "description": "Selects a given option, deselects other options, and updates the UI.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleRequestSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ReturnType<typeof createRequestSelectionEvent>"
                  }
                }
              ],
              "description": "Handles updating selection when an option element requests selection via\nproperty / attribute change.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleRequestDeselection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ReturnType<typeof createRequestDeselectionEvent>"
                  }
                }
              ],
              "description": "Handles updating selection when an option element requests deselection via\nproperty / attribute change.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "initUserSelection",
              "privacy": "private",
              "description": "Attempts to initialize the selected option from user-settable values like\nSSR, setting `value`, or `selectedIndex` at startup.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleIconChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "dispatchInteractionEvents",
              "privacy": "private",
              "description": "Dispatches the `input` and `change` events.",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getErrorText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "[getFormValue]",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "[createValidator]",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "[getValidityAnchor]",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            }
          ],
          "superclass": {
            "name": "OutlinedSelect",
            "package": "@material/web/select/internal/outlined-select.js"
          },
          "tagName": "oscd-outlined-select",
          "customElement": true,
          "summary": "Select menus display a list of choices on temporary surfaces and display the\ncurrently selected menu item above the menu.\n\nThe select component allows users to choose a value from a fixed list of\navailable options. Composed of an interactive anchor button and a menu, it is\nanalogous to the native HTML `<select>` element. This is the \"outlined\"\nvariant.",
          "attributes": [
            {
              "name": "quick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Opens the menu synchronously with no animation.",
              "fieldName": "quick",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the select is required.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "error-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "fieldName": "errorText",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The floating label for the field.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "no-asterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the asterisk on the floating label, when the select is\nrequired.",
              "fieldName": "noAsterisk",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "supporting-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Conveys additional information below the select, such as how it should\nbe used.",
              "fieldName": "supportingText",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets whether or not the select is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "fieldName": "error",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "menu-positioning",
              "type": {
                "text": "'absolute' | 'fixed' | 'popover'"
              },
              "default": "'popover'",
              "description": "Whether or not the underlying md-menu should be position: fixed to display\nin a top-level manner, or position: absolute.\n\nposition:fixed is useful for cases where select is inside of another\nelement with stacking context and hidden overflows such as `md-dialog`.",
              "fieldName": "menuPositioning",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "clamp-menu-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clamps the menu-width to the width of the select.",
              "fieldName": "clampMenuWidth",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "typeahead-delay",
              "default": "DEFAULT_TYPEAHEAD_BUFFER_TIME",
              "description": "The max time between the keystrokes of the typeahead select / menu behavior\nbefore it clears the typeahead buffer.",
              "fieldName": "typeaheadDelay",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "has-leading-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a leading icon. Used for SSR.",
              "fieldName": "hasLeadingIcon",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "display-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text to display in the field. Only set for SSR.",
              "fieldName": "displayText",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "menu-align",
              "type": {
                "text": "'start' | 'end'"
              },
              "default": "'start'",
              "description": "Whether the menu should be aligned to the start or the end of the select's\ntextbox.",
              "fieldName": "menuAlign",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the currently selected option.\n\nNote: For SSR, set `[selected]` on the requested option and `displayText`\nrather than setting `value` setting `value` will incur a DOM query.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "selected-index",
              "type": {
                "text": "number"
              },
              "description": "The index of the currently selected option.\n\nNote: For SSR, set `[selected]` on the requested option and `displayText`\nrather than setting `selectedIndex` setting `selectedIndex` will incur a\nDOM query.",
              "fieldName": "selectedIndex",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "Event"
              },
              "description": "{InputEvent} The native `input` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event) --bubbles --composed",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "{Event} The native `change` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event) --bubbles",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "description": "{Event} Fired when the select's menu is about to open.",
              "name": "opening",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "description": "{Event} Fired when the select's menu has finished animations and opened.",
              "name": "opened",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "description": "{Event} Fired when the select's menu is about to close.",
              "name": "closing",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            },
            {
              "description": "{Event} Fired when the select's menu has finished animations and closed.",
              "name": "closed",
              "inheritedFrom": {
                "name": "Select",
                "module": "select/internal/select.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdOutlinedSelect",
          "declaration": {
            "name": "OscdOutlinedSelect",
            "module": "select/OscdOutlinedSelect.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "select/OscdSelectOption.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Select menus display a list of choices on temporary surfaces and display the\ncurrently selected menu item above the menu.\n\nThe select component allows users to choose a value from a fixed list of\navailable options. Composed of an interactive anchor button and a menu, it is\nanalogous to the native HTML `<select>` element. This is the option that\ncan be placed inside of an oscd-select.\n\nThis component is a subclass of `oscd-menu-item` and can accept the same slots,\nproperties, and events as `oscd-menu-item`.",
          "name": "OscdSelectOption",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the item and makes it non-selectable and non-interactive.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "isMenuItem",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "READONLY: self-identifies as a menu item and sets its identifying attribute",
              "attribute": "md-menu-item",
              "reflects": true,
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the item in the selected visual state when a submenu is opened.",
              "attribute": "selected",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Form value of the option.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "listItemRoot",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "headlineElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingTextElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultElements",
              "type": {
                "text": "Element[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "default": "'option'",
              "type": {
                "text": "'option'"
              },
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeaheadText",
              "description": "The text that is selectable via typeahead. If not set, defaults to the\ninnerText of the item slotted into the `\"headline\"` slot.",
              "attribute": "typeahead-text",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayText",
              "description": "The text that is displayed in the select field when selected. If not set,\ndefaults to the textContent of the item slotted into the `\"headline\"` slot.",
              "attribute": "display-text",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectOptionController",
              "privacy": "private",
              "readonly": true,
              "default": "new SelectOptionController(this, { getHeadlineElements: () => { return this.headlineElements; }, getSupportingTextElements: () => { return this.supportingTextElements; }, getDefaultElements: () => { return this.defaultElements; }, getInteractiveElement: () => this.listItemRoot, })",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderListItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "the child content of the list item."
                }
              ],
              "description": "Renders the root list item.",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderRipple",
              "privacy": "protected",
              "description": "Handles rendering of the ripple element.",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFocusRing",
              "privacy": "protected",
              "description": "Handles rendering of the focus ring.",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "getRenderClasses",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "ClassInfo"
                }
              },
              "description": "Classes applied to the list item root.",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderBody",
              "privacy": "protected",
              "description": "Handles rendering the headline and supporting text.",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            }
          ],
          "superclass": {
            "name": "SelectOptionEl",
            "package": "@material/web/select/internal/selectoption/select-option.js"
          },
          "tagName": "oscd-select-option",
          "customElement": true,
          "summary": "Select menus display a list of choices on temporary surfaces and display the\ncurrently selected menu item above the menu.\n\nThe select component allows users to choose a value from a fixed list of\navailable options. Composed of an interactive anchor button and a menu, it is\nanalogous to the native HTML `<select>` element. This is the option that\ncan be placed inside of an oscd-select.\n\nThis component is a subclass of `oscd-menu-item` and can accept the same slots,\nproperties, and events as `oscd-menu-item`.",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the item and makes it non-selectable and non-interactive.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "name": "md-menu-item",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "READONLY: self-identifies as a menu item and sets its identifying attribute",
              "fieldName": "isMenuItem",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the item in the selected visual state when a submenu is opened.",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Form value of the option.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "name": "typeahead-text",
              "description": "The text that is selectable via typeahead. If not set, defaults to the\ninnerText of the item slotted into the `\"headline\"` slot.",
              "fieldName": "typeaheadText",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "name": "display-text",
              "description": "The text that is displayed in the select field when selected. If not set,\ndefaults to the textContent of the item slotted into the `\"headline\"` slot.",
              "fieldName": "displayText",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            }
          ],
          "events": [
            {
              "description": "{CustomEvent<{initiator: SelectOption, reason: Reason, itemPath: SelectOption[]}>} Closes the encapsulating menu on closable interaction. --bubbles --composed",
              "name": "close-menu",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "description": "{Event} Requests the parent md-select to select this element (and deselect others if single-selection) when `selected` changed to `true`. --bubbles --composed",
              "name": "request-selection",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            },
            {
              "description": "{Event} Requests the parent md-select to deselect this element when `selected` changed to `false`. --bubbles --composed",
              "name": "request-deselection",
              "inheritedFrom": {
                "name": "SelectOptionEl",
                "module": "select/internal/selectoption/select-option.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOption",
          "declaration": {
            "name": "SelectOption",
            "package": "@material/web/select/internal/selectoption/select-option.js"
          }
        },
        {
          "kind": "js",
          "name": "OscdSelectOption",
          "declaration": {
            "name": "OscdSelectOption",
            "module": "select/OscdSelectOption.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "tabs/OscdPrimaryTab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tab allow users to display a tab within a Tabs.",
          "name": "OscdPrimaryTab",
          "members": [
            {
              "kind": "field",
              "name": "inlineIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the icon renders inline with label or stacked vertically.",
              "attribute": "inline-icon",
              "inheritedFrom": {
                "name": "PrimaryTab",
                "module": "tabs/internal/primary-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "getContentClasses",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "ClassInfo"
                }
              },
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "isTab",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true",
              "description": "The attribute `md-tab` indicates that the element is a tab for the parent\nelement, `<md-tabs>`. Make sure if you're implementing your own `md-tab`\ncomponent that you have an `md-tab` attribute set.",
              "attribute": "md-tab",
              "reflects": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the tab is selected.",
              "attribute": "active",
              "reflects": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "deprecated": "use `active`",
              "attribute": "selected",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "In SSR, set this to true when an icon is present.",
              "attribute": "has-icon",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "In SSR, set this to true when there is no label and only an icon.",
              "attribute": "icon-only",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "[INDICATOR]",
              "type": {
                "text": "HTMLElement | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "fullWidthIndicator",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedDefaultNodes",
              "type": {
                "text": "Node[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedIcons",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleContentClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "[ANIMATE_INDICATOR]",
              "parameters": [
                {
                  "name": "previousTab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "getKeyframes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "previousTab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleIconSlotChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            }
          ],
          "superclass": {
            "name": "PrimaryTab",
            "package": "@material/web/tabs/internal/primary-tab.js"
          },
          "tagName": "oscd-primary-tab",
          "customElement": true,
          "summary": "Tab allow users to display a tab within a Tabs.",
          "attributes": [
            {
              "name": "inline-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the icon renders inline with label or stacked vertically.",
              "fieldName": "inlineIcon",
              "inheritedFrom": {
                "name": "PrimaryTab",
                "module": "tabs/internal/primary-tab.ts"
              }
            },
            {
              "name": "md-tab",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true",
              "description": "The attribute `md-tab` indicates that the element is a tab for the parent\nelement, `<md-tabs>`. Make sure if you're implementing your own `md-tab`\ncomponent that you have an `md-tab` attribute set.",
              "fieldName": "isTab",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the tab is selected.",
              "fieldName": "active",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "name": "selected",
              "deprecated": "use `active`",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "name": "has-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "In SSR, set this to true when an icon is present.",
              "fieldName": "hasIcon",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "name": "icon-only",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "In SSR, set this to true when there is no label and only an icon.",
              "fieldName": "iconOnly",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdPrimaryTab",
          "declaration": {
            "name": "OscdPrimaryTab",
            "module": "tabs/OscdPrimaryTab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "tabs/OscdSecondaryTab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tab allow users to display a tab within a Tabs.",
          "name": "OscdSecondaryTab",
          "members": [
            {
              "kind": "field",
              "name": "fullWidthIndicator",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "isTab",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true",
              "description": "The attribute `md-tab` indicates that the element is a tab for the parent\nelement, `<md-tabs>`. Make sure if you're implementing your own `md-tab`\ncomponent that you have an `md-tab` attribute set.",
              "attribute": "md-tab",
              "reflects": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the tab is selected.",
              "attribute": "active",
              "reflects": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "deprecated": "use `active`",
              "attribute": "selected",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "In SSR, set this to true when an icon is present.",
              "attribute": "has-icon",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "In SSR, set this to true when there is no label and only an icon.",
              "attribute": "icon-only",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "[INDICATOR]",
              "type": {
                "text": "HTMLElement | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedDefaultNodes",
              "type": {
                "text": "Node[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "assignedIcons",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "getContentClasses",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "ClassInfo"
                }
              },
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleContentClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "[ANIMATE_INDICATOR]",
              "parameters": [
                {
                  "name": "previousTab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "getKeyframes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "previousTab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleIconSlotChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            }
          ],
          "superclass": {
            "name": "SecondaryTab",
            "package": "@material/web/tabs/internal/secondary-tab.js"
          },
          "tagName": "oscd-secondary-tab",
          "customElement": true,
          "summary": "Tab allow users to display a tab within a Tabs.",
          "attributes": [
            {
              "name": "md-tab",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true",
              "description": "The attribute `md-tab` indicates that the element is a tab for the parent\nelement, `<md-tabs>`. Make sure if you're implementing your own `md-tab`\ncomponent that you have an `md-tab` attribute set.",
              "fieldName": "isTab",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the tab is selected.",
              "fieldName": "active",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "name": "selected",
              "deprecated": "use `active`",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "name": "has-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "In SSR, set this to true when an icon is present.",
              "fieldName": "hasIcon",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            },
            {
              "name": "icon-only",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "In SSR, set this to true when there is no label and only an icon.",
              "fieldName": "iconOnly",
              "inheritedFrom": {
                "name": "Tab",
                "module": "tabs/internal/tab.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdSecondaryTab",
          "declaration": {
            "name": "OscdSecondaryTab",
            "module": "tabs/OscdSecondaryTab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "tabs/OscdTabs.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabs displays a list of selectable tabs.",
          "name": "OscdTabs",
          "members": [
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "Tab[]"
              },
              "readonly": true,
              "description": "The tabs of this tab bar.",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeTab",
              "description": "The currently selected tab, `null` only when there are no tab children.",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeTabIndex",
              "description": "The index of the currently selected tab.",
              "attribute": "active-tab-index",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoActivate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not to automatically select a tab when it is focused.",
              "attribute": "auto-activate",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabsScrollerElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "slotElement",
              "type": {
                "text": "HTMLSlotElement | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusedTab",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "internals",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "scrollToTab",
              "parameters": [
                {
                  "name": "tabToScrollTo",
                  "optional": true,
                  "type": {
                    "text": "Tab | null"
                  },
                  "description": "The tab that should be scrolled to. Defaults to the\nactive tab."
                }
              ],
              "description": "Scrolls the toolbar, if overflowing, to the active tab, or the provided\ntab.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleTabClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "activateTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "activeTab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateFocusableTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "focusableTab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyup",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusout",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            }
          ],
          "superclass": {
            "name": "Tabs",
            "package": "@material/web/tabs/internal/tabs.js"
          },
          "tagName": "oscd-tabs",
          "customElement": true,
          "summary": "Tabs displays a list of selectable tabs.",
          "attributes": [
            {
              "name": "active-tab-index",
              "description": "The index of the currently selected tab.",
              "fieldName": "activeTabIndex",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            },
            {
              "name": "auto-activate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not to automatically select a tab when it is focused.",
              "fieldName": "autoActivate",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Fired when the selected tab changes. The target's `activeTabIndex` or `activeTab` provide information about the selection change. The change event is fired when a user interaction like a space/enter key or click cause a selection change. The tab selection based on these actions can be cancelled by calling preventDefault on the triggering `keydown` or `click` event. --bubbles",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "tabs/internal/tabs.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdTabs",
          "declaration": {
            "name": "OscdTabs",
            "module": "tabs/OscdTabs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "iconbutton/OscdFilledIconButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon buttons help people take supplementary actions with a single\ntap.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence.\n\n__Rationale:__ The most compact and unobtrusive type of button, icon buttons\nare used for optional supplementary actions such as \"Bookmark\" or \"Star.\"\n\n__Example usages:__\n- Add to Favorites\n- Print",
          "name": "OscdFilledIconButton",
          "members": [
            {
              "kind": "method",
              "name": "getRenderClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ mode: 'open', delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the icon button and makes it non-interactive.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "softDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "\"Soft-disables\" the icon button (disabled but still focusable).\n\nUse this when an icon button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "attribute": "soft-disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipIconInRtl",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flips the icon if it is in an RTL context at startup.",
              "attribute": "flip-icon-in-rtl",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the icon button is used as a link (`href` is set).",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "LinkTarget | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabelSelected",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` of the button when the button is toggleable and selected.",
              "attribute": "aria-label-selected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the button will toggle between selected and unselected\nstates",
              "attribute": "toggle",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the selected state. When false, displays the default icon. When true,\ndisplays the selected icon, or the default icon If no `slot=\"selected\"`\nicon is provided.",
              "attribute": "selected",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "attribute": "type",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The associated form element with which this element's value will submit.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "description": "The labels this element is associated with.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSelectedIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTouchTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFocusRing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderRipple",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles a click on this element.",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClickOnChild",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles a click on the child <div> or <button> element within this\nelement's shadow DOM.",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ],
          "superclass": {
            "name": "IconButton",
            "package": "@material/web/iconbutton/internal/icon-button.js"
          },
          "tagName": "oscd-filled-icon-button",
          "customElement": true,
          "summary": "Icon buttons help people take supplementary actions with a single\ntap.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence.\n\n__Rationale:__ The most compact and unobtrusive type of button, icon buttons\nare used for optional supplementary actions such as \"Bookmark\" or \"Star.\"\n\n__Example usages:__\n- Add to Favorites\n- Print",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the icon button and makes it non-interactive.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "soft-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "\"Soft-disables\" the icon button (disabled but still focusable).\n\nUse this when an icon button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "fieldName": "softDisabled",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "flip-icon-in-rtl",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flips the icon if it is in an RTL context at startup.",
              "fieldName": "flipIconInRtl",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the icon button is used as a link (`href` is set).",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "LinkTarget | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "aria-label-selected",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` of the button when the button is toggleable and selected.",
              "fieldName": "ariaLabelSelected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the button will toggle between selected and unselected\nstates",
              "fieldName": "toggle",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the selected state. When false, displays the default icon. When true,\ndisplays the selected icon, or the default icon If no `slot=\"selected\"`\nicon is provided.",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "{InputEvent} Dispatched when a toggle button toggles --bubbles --composed",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Dispatched when a toggle button toggles --bubbles",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdFilledIconButton",
          "declaration": {
            "name": "OscdFilledIconButton",
            "module": "iconbutton/OscdFilledIconButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "iconbutton/OscdFilledTonalIconButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon buttons help people take supplementary actions with a single\ntap.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence.\n\n__Rationale:__ The most compact and unobtrusive type of button, icon buttons\nare used for optional supplementary actions such as \"Bookmark\" or \"Star.\"\n\n__Example usages:__\n- Add to Favorites\n- Print",
          "name": "OscdFilledTonalIconButton",
          "members": [
            {
              "kind": "method",
              "name": "getRenderClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ mode: 'open', delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the icon button and makes it non-interactive.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "softDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "\"Soft-disables\" the icon button (disabled but still focusable).\n\nUse this when an icon button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "attribute": "soft-disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipIconInRtl",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flips the icon if it is in an RTL context at startup.",
              "attribute": "flip-icon-in-rtl",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the icon button is used as a link (`href` is set).",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "LinkTarget | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabelSelected",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` of the button when the button is toggleable and selected.",
              "attribute": "aria-label-selected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the button will toggle between selected and unselected\nstates",
              "attribute": "toggle",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the selected state. When false, displays the default icon. When true,\ndisplays the selected icon, or the default icon If no `slot=\"selected\"`\nicon is provided.",
              "attribute": "selected",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "attribute": "type",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The associated form element with which this element's value will submit.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "description": "The labels this element is associated with.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSelectedIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTouchTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFocusRing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderRipple",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles a click on this element.",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClickOnChild",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles a click on the child <div> or <button> element within this\nelement's shadow DOM.",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ],
          "superclass": {
            "name": "IconButton",
            "package": "@material/web/iconbutton/internal/icon-button.js"
          },
          "tagName": "oscd-filled-tonal-icon-button",
          "customElement": true,
          "summary": "Icon buttons help people take supplementary actions with a single\ntap.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence.\n\n__Rationale:__ The most compact and unobtrusive type of button, icon buttons\nare used for optional supplementary actions such as \"Bookmark\" or \"Star.\"\n\n__Example usages:__\n- Add to Favorites\n- Print",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the icon button and makes it non-interactive.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "soft-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "\"Soft-disables\" the icon button (disabled but still focusable).\n\nUse this when an icon button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "fieldName": "softDisabled",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "flip-icon-in-rtl",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flips the icon if it is in an RTL context at startup.",
              "fieldName": "flipIconInRtl",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the icon button is used as a link (`href` is set).",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "LinkTarget | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "aria-label-selected",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` of the button when the button is toggleable and selected.",
              "fieldName": "ariaLabelSelected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the button will toggle between selected and unselected\nstates",
              "fieldName": "toggle",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the selected state. When false, displays the default icon. When true,\ndisplays the selected icon, or the default icon If no `slot=\"selected\"`\nicon is provided.",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "{InputEvent} Dispatched when a toggle button toggles --bubbles --composed",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Dispatched when a toggle button toggles --bubbles",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdFilledTonalIconButton",
          "declaration": {
            "name": "OscdFilledTonalIconButton",
            "module": "iconbutton/OscdFilledTonalIconButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "iconbutton/OscdIconButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon buttons help people take supplementary actions with a single\ntap.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence.\n\n__Rationale:__ The most compact and unobtrusive type of button, icon buttons\nare used for optional supplementary actions such as \"Bookmark\" or \"Star.\"\n\n__Example usages:__\n- Add to Favorites\n- Print",
          "name": "OscdIconButton",
          "members": [
            {
              "kind": "method",
              "name": "getRenderClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ mode: 'open', delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the icon button and makes it non-interactive.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "softDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "\"Soft-disables\" the icon button (disabled but still focusable).\n\nUse this when an icon button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "attribute": "soft-disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipIconInRtl",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flips the icon if it is in an RTL context at startup.",
              "attribute": "flip-icon-in-rtl",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the icon button is used as a link (`href` is set).",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "LinkTarget | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabelSelected",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` of the button when the button is toggleable and selected.",
              "attribute": "aria-label-selected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the button will toggle between selected and unselected\nstates",
              "attribute": "toggle",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the selected state. When false, displays the default icon. When true,\ndisplays the selected icon, or the default icon If no `slot=\"selected\"`\nicon is provided.",
              "attribute": "selected",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "attribute": "type",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The associated form element with which this element's value will submit.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "description": "The labels this element is associated with.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSelectedIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTouchTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFocusRing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderRipple",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles a click on this element.",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClickOnChild",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles a click on the child <div> or <button> element within this\nelement's shadow DOM.",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ],
          "superclass": {
            "name": "IconButton",
            "package": "@material/web/iconbutton/internal/icon-button.js"
          },
          "tagName": "oscd-icon-button",
          "customElement": true,
          "summary": "Icon buttons help people take supplementary actions with a single\ntap.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence.\n\n__Rationale:__ The most compact and unobtrusive type of button, icon buttons\nare used for optional supplementary actions such as \"Bookmark\" or \"Star.\"\n\n__Example usages:__\n- Add to Favorites\n- Print",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the icon button and makes it non-interactive.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "soft-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "\"Soft-disables\" the icon button (disabled but still focusable).\n\nUse this when an icon button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "fieldName": "softDisabled",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "flip-icon-in-rtl",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flips the icon if it is in an RTL context at startup.",
              "fieldName": "flipIconInRtl",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the icon button is used as a link (`href` is set).",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "LinkTarget | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "aria-label-selected",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` of the button when the button is toggleable and selected.",
              "fieldName": "ariaLabelSelected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the button will toggle between selected and unselected\nstates",
              "fieldName": "toggle",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the selected state. When false, displays the default icon. When true,\ndisplays the selected icon, or the default icon If no `slot=\"selected\"`\nicon is provided.",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "{InputEvent} Dispatched when a toggle button toggles --bubbles --composed",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Dispatched when a toggle button toggles --bubbles",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdIconButton",
          "declaration": {
            "name": "OscdIconButton",
            "module": "iconbutton/OscdIconButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "iconbutton/OscdOutlinedIconButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon buttons help people take supplementary actions with a single\ntap.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence.\n\n__Rationale:__ The most compact and unobtrusive type of button, icon buttons\nare used for optional supplementary actions such as \"Bookmark\" or \"Star.\"\n\n__Example usages:__\n- Add to Favorites\n- Print",
          "name": "OscdOutlinedIconButton",
          "members": [
            {
              "kind": "method",
              "name": "getRenderClasses",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ mode: 'open', delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the icon button and makes it non-interactive.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "softDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "\"Soft-disables\" the icon button (disabled but still focusable).\n\nUse this when an icon button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "attribute": "soft-disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipIconInRtl",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flips the icon if it is in an RTL context at startup.",
              "attribute": "flip-icon-in-rtl",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the icon button is used as a link (`href` is set).",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "LinkTarget | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabelSelected",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` of the button when the button is toggleable and selected.",
              "attribute": "aria-label-selected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the button will toggle between selected and unselected\nstates",
              "attribute": "toggle",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the selected state. When false, displays the default icon. When true,\ndisplays the selected icon, or the default icon If no `slot=\"selected\"`\nicon is provided.",
              "attribute": "selected",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "attribute": "type",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The associated form element with which this element's value will submit.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "description": "The labels this element is associated with.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSelectedIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTouchTarget",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFocusRing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderRipple",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles a click on this element.",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClickOnChild",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles a click on the child <div> or <button> element within this\nelement's shadow DOM.",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ],
          "superclass": {
            "name": "IconButton",
            "package": "@material/web/iconbutton/internal/icon-button.js"
          },
          "tagName": "oscd-outlined-icon-button",
          "customElement": true,
          "summary": "Icon buttons help people take supplementary actions with a single\ntap.\n\n__Emphasis:__ Low emphasis – For optional or supplementary actions with the\nleast amount of prominence.\n\n__Rationale:__ The most compact and unobtrusive type of button, icon buttons\nare used for optional supplementary actions such as \"Bookmark\" or \"Star.\"\n\n__Example usages:__\n- Add to Favorites\n- Print",
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the icon button and makes it non-interactive.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "soft-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "\"Soft-disables\" the icon button (disabled but still focusable).\n\nUse this when an icon button needs increased visibility when disabled. See\nhttps://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\nfor more guidance on when this is needed.",
              "fieldName": "softDisabled",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "flip-icon-in-rtl",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flips the icon if it is in an RTL context at startup.",
              "fieldName": "flipIconInRtl",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The filename to use when downloading the linked resource.\nIf not specified, the browser will determine a filename.\nThis is only applicable when the icon button is used as a link (`href` is set).",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "LinkTarget | ''"
              },
              "default": "''",
              "description": "Sets the underlying `HTMLAnchorElement`'s `target` attribute.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "aria-label-selected",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` of the button when the button is toggleable and selected.",
              "fieldName": "ariaLabelSelected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the button will toggle between selected and unselected\nstates",
              "fieldName": "toggle",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the selected state. When false, displays the default icon. When true,\ndisplays the selected icon, or the default icon If no `slot=\"selected\"`\nicon is provided.",
              "fieldName": "selected",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "FormSubmitterType"
              },
              "default": "'submit'",
              "description": "The default behavior of the button. May be \"button\", \"reset\", or \"submit\"\n(default).",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value added to a form with the button's name when the button submits a\nform.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              },
              "description": "{InputEvent} Dispatched when a toggle button toggles --bubbles --composed",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "description": "{Event} Dispatched when a toggle button toggles --bubbles",
              "inheritedFrom": {
                "name": "IconButton",
                "module": "iconbutton/internal/icon-button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdOutlinedIconButton",
          "declaration": {
            "name": "OscdOutlinedIconButton",
            "module": "iconbutton/OscdOutlinedIconButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "textfield/OscdFilledTextField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Material Design filled text field component.\nThis component is a wrapper around the `FilledTextField` from Material Web Components,\nproviding a scoped element that uses the `OscdFilledField` as its field.",
          "name": "OscdFilledTextField",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "fieldTag",
              "type": {
                "text": "StaticValue"
              },
              "privacy": "protected",
              "readonly": true,
              "default": "literal`oscd-filled-field`",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets whether or not the text field is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "attribute": "error-text",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The floating Material label of the textfield component. It informs the user\nabout what information is requested for a text field. It is aligned with\nthe input text, is always visible, and it floats when focused or when text\nis entered into the textfield. This label also sets accessibilty labels,\nbut the accessible label is overriden by `aria-label`.\n\nLearn more about floating labels from the Material Design guidelines:\nhttps://m3.material.io/components/text-fields/guidelines",
              "attribute": "label",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "noAsterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the asterisk on the floating label, when the text field is\nrequired.",
              "attribute": "no-asterisk",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that the user must specify a value for the input before the\nowning form can be submitted and will render an error state when\n`reportValidity()` is invoked when value is empty. Additionally the\nfloating label will render an asterisk `\"*\"` when true.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the text field. It is always a string.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional prefix to display before the input value.",
              "attribute": "prefix-text",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional suffix to display after the input value.",
              "attribute": "suffix-text",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasLeadingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a leading icon. Used for SSR.",
              "attribute": "has-leading-icon",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasTrailingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a trailing icon. Used for SSR.",
              "attribute": "has-trailing-icon",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Conveys additional information below the text field, such as how it should\nbe used.",
              "attribute": "supporting-text",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "textDirection",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Override the input text CSS `direction`. Useful for RTL languages that use\nLTR notation for fractions.",
              "attribute": "text-direction",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "The number of rows to display for a `type=\"textarea\"` text field.\nDefaults to 2.",
              "attribute": "rows",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "cols",
              "type": {
                "text": "number"
              },
              "default": "20",
              "description": "The number of cols to display for a `type=\"textarea\"` text field.\nDefaults to 20.",
              "attribute": "cols",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputMode",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "inputMode",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the greatest value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max",
              "attribute": "max",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The maximum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength",
              "attribute": "maxLength",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the most negative value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min",
              "attribute": "min",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The minimum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength",
              "attribute": "minLength",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "noSpinner",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, hide the spinner for `type=\"number\"` text fields.",
              "attribute": "no-spinner",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A regular expression that the text field's value must match to pass\nconstraint validation.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#pattern",
              "attribute": "pattern",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the text displayed in the textfield when it has no value. Provides\na brief hint to the user as to the expected type of data that should be\nentered into the control. Unlike `label`, the placeholder is not visible\nand does not float when the textfield has a value.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/placeholder",
              "attribute": "placeholder",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not a user should be able to edit the text field's\nvalue.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#readonly",
              "attribute": "readOnly",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that input accepts multiple email addresses.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple",
              "attribute": "multiple",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionDirection",
              "description": "Gets or sets the direction in which selection occurred.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionEnd",
              "description": "Gets or sets the end position or offset of a text selection.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionStart",
              "description": "Gets or sets the starting position or offset of a text selection.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Returns or sets the element's step attribute, which works with min and max\nto limit the increments at which a numeric or date-time value can be set.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step",
              "attribute": "step",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "TextFieldType | UnsupportedTextFieldType"
              },
              "default": "'text'",
              "description": "The `<input>` type to use, defaults to \"text\". The type greatly changes how\nthe text field behaves.\n\nText fields support a limited number of `<input>` types:\n\n- text\n- textarea\n- email\n- number\n- password\n- search\n- tel\n- url\n\nSee\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types\nfor more details on each input type.",
              "attribute": "type",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Describes what, if any, type of autocomplete functionality the input\nshould provide.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",
              "attribute": "autocomplete",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "description": "The text field's value as a number.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "The text field's value as a Date.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Returns true when the text field has been interacted with. Native\nvalidation errors only display in response to user interactions.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Whether or not a native error has been reported via `reportValidity()`.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeErrorText",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "The validation message displayed from a native error via\n`reportValidity()`.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputOrTextarea",
              "type": {
                "text": "| HTMLInputElement\n    | HTMLTextAreaElement\n    | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "Field | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "leadingIcons",
              "type": {
                "text": "Element[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "trailingIcons",
              "type": {
                "text": "Element[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the text field.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Replaces a range of text with a new string.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setRangeText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number | null"
                  },
                  "description": "The offset into the text field for the start of the selection."
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number | null"
                  },
                  "description": "The offset into the text field for the end of the selection."
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  },
                  "description": "The direction in which the selection is performed."
                }
              ],
              "description": "Sets the start and end positions of a selection in the text field.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "showPicker",
              "description": "Shows the browser picker for an input element of type \"date\", \"time\", etc.\n\nFor a full list of supported types, see:\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/showPicker#browser_compatibility\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/showPicker",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepDown",
              "parameters": [
                {
                  "name": "stepDecrement",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "The number of steps to decrement, defaults to 1."
                }
              ],
              "description": "Decrements the value of a numeric type text field by `step` or `n` `step`\nnumber of times.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepDown",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepUp",
              "parameters": [
                {
                  "name": "stepIncrement",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "The number of steps to increment, defaults to 1."
                }
              ],
              "description": "Increments the value of a numeric type text field by `step` or `n` `step`\nnumber of times.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepUp",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the text field to its default value.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderField",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLeadingIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTrailingIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderInputOrTextarea",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAffix",
              "privacy": "private",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "isSuffix",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getErrorText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "redispatchEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInputOrTextarea",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInput",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleIconChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "[getFormValue]",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "[createValidator]",
              "return": {
                "type": {
                  "text": "Validator<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "[getValidityAnchor]",
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "[onReportValidity]",
              "parameters": [
                {
                  "name": "invalidEvent",
                  "type": {
                    "text": "Event | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "FilledTextField",
            "package": "@material/web/textfield/internal/filled-text-field.js"
          },
          "tagName": "oscd-filled-text-field",
          "customElement": true,
          "summary": "A Material Design filled text field component.\nThis component is a wrapper around the `FilledTextField` from Material Web Components,\nproviding a scoped element that uses the `OscdFilledField` as its field.",
          "attributes": [
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets whether or not the text field is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "fieldName": "error",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "error-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "fieldName": "errorText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The floating Material label of the textfield component. It informs the user\nabout what information is requested for a text field. It is aligned with\nthe input text, is always visible, and it floats when focused or when text\nis entered into the textfield. This label also sets accessibilty labels,\nbut the accessible label is overriden by `aria-label`.\n\nLearn more about floating labels from the Material Design guidelines:\nhttps://m3.material.io/components/text-fields/guidelines",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "no-asterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the asterisk on the floating label, when the text field is\nrequired.",
              "fieldName": "noAsterisk",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that the user must specify a value for the input before the\nowning form can be submitted and will render an error state when\n`reportValidity()` is invoked when value is empty. Additionally the\nfloating label will render an asterisk `\"*\"` when true.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the text field. It is always a string.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "prefix-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional prefix to display before the input value.",
              "fieldName": "prefixText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "suffix-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional suffix to display after the input value.",
              "fieldName": "suffixText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "has-leading-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a leading icon. Used for SSR.",
              "fieldName": "hasLeadingIcon",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "has-trailing-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a trailing icon. Used for SSR.",
              "fieldName": "hasTrailingIcon",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "supporting-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Conveys additional information below the text field, such as how it should\nbe used.",
              "fieldName": "supportingText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "text-direction",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Override the input text CSS `direction`. Useful for RTL languages that use\nLTR notation for fractions.",
              "fieldName": "textDirection",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "The number of rows to display for a `type=\"textarea\"` text field.\nDefaults to 2.",
              "fieldName": "rows",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "cols",
              "type": {
                "text": "number"
              },
              "default": "20",
              "description": "The number of cols to display for a `type=\"textarea\"` text field.\nDefaults to 20.",
              "fieldName": "cols",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "inputMode",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "inputMode",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the greatest value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max",
              "fieldName": "max",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "maxLength",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The maximum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength",
              "fieldName": "maxLength",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "min",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the most negative value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min",
              "fieldName": "min",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "minLength",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The minimum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength",
              "fieldName": "minLength",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "no-spinner",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, hide the spinner for `type=\"number\"` text fields.",
              "fieldName": "noSpinner",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A regular expression that the text field's value must match to pass\nconstraint validation.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#pattern",
              "fieldName": "pattern",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the text displayed in the textfield when it has no value. Provides\na brief hint to the user as to the expected type of data that should be\nentered into the control. Unlike `label`, the placeholder is not visible\nand does not float when the textfield has a value.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/placeholder",
              "fieldName": "placeholder",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not a user should be able to edit the text field's\nvalue.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#readonly",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that input accepts multiple email addresses.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple",
              "fieldName": "multiple",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "step",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Returns or sets the element's step attribute, which works with min and max\nto limit the increments at which a numeric or date-time value can be set.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step",
              "fieldName": "step",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "TextFieldType | UnsupportedTextFieldType"
              },
              "default": "'text'",
              "description": "The `<input>` type to use, defaults to \"text\". The type greatly changes how\nthe text field behaves.\n\nText fields support a limited number of `<input>` types:\n\n- text\n- textarea\n- email\n- number\n- password\n- search\n- tel\n- url\n\nSee\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types\nfor more details on each input type.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Describes what, if any, type of autocomplete functionality the input\nshould provide.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",
              "fieldName": "autocomplete",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            }
          ],
          "events": [
            {
              "description": "{Event} The native `select` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select_event) --bubbles",
              "name": "select",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "description": "{Event} The native `change` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event) --bubbles",
              "name": "change",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "description": "{InputEvent} The native `input` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event) --bubbles --composed",
              "name": "input",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdFilledTextField",
          "declaration": {
            "name": "OscdFilledTextField",
            "module": "textfield/OscdFilledTextField.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "textfield/OscdOutlinedTextField.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Material Design outlined text field component.",
          "name": "OscdOutlinedTextField",
          "members": [
            {
              "kind": "field",
              "name": "scopedElements",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "fieldTag",
              "type": {
                "text": "StaticValue"
              },
              "privacy": "protected",
              "readonly": true,
              "default": "literal`oscd-outlined-field`",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets whether or not the text field is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "attribute": "error",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "errorText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "attribute": "error-text",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The floating Material label of the textfield component. It informs the user\nabout what information is requested for a text field. It is aligned with\nthe input text, is always visible, and it floats when focused or when text\nis entered into the textfield. This label also sets accessibilty labels,\nbut the accessible label is overriden by `aria-label`.\n\nLearn more about floating labels from the Material Design guidelines:\nhttps://m3.material.io/components/text-fields/guidelines",
              "attribute": "label",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "noAsterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the asterisk on the floating label, when the text field is\nrequired.",
              "attribute": "no-asterisk",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that the user must specify a value for the input before the\nowning form can be submitted and will render an error state when\n`reportValidity()` is invoked when value is empty. Additionally the\nfloating label will render an asterisk `\"*\"` when true.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the text field. It is always a string.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional prefix to display before the input value.",
              "attribute": "prefix-text",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional suffix to display after the input value.",
              "attribute": "suffix-text",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasLeadingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a leading icon. Used for SSR.",
              "attribute": "has-leading-icon",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasTrailingIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a trailing icon. Used for SSR.",
              "attribute": "has-trailing-icon",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "supportingText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Conveys additional information below the text field, such as how it should\nbe used.",
              "attribute": "supporting-text",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "textDirection",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Override the input text CSS `direction`. Useful for RTL languages that use\nLTR notation for fractions.",
              "attribute": "text-direction",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "The number of rows to display for a `type=\"textarea\"` text field.\nDefaults to 2.",
              "attribute": "rows",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "cols",
              "type": {
                "text": "number"
              },
              "default": "20",
              "description": "The number of cols to display for a `type=\"textarea\"` text field.\nDefaults to 20.",
              "attribute": "cols",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputMode",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "inputMode",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the greatest value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max",
              "attribute": "max",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The maximum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength",
              "attribute": "maxLength",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the most negative value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min",
              "attribute": "min",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The minimum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength",
              "attribute": "minLength",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "noSpinner",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, hide the spinner for `type=\"number\"` text fields.",
              "attribute": "no-spinner",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A regular expression that the text field's value must match to pass\nconstraint validation.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#pattern",
              "attribute": "pattern",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the text displayed in the textfield when it has no value. Provides\na brief hint to the user as to the expected type of data that should be\nentered into the control. Unlike `label`, the placeholder is not visible\nand does not float when the textfield has a value.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/placeholder",
              "attribute": "placeholder",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not a user should be able to edit the text field's\nvalue.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#readonly",
              "attribute": "readOnly",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that input accepts multiple email addresses.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple",
              "attribute": "multiple",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionDirection",
              "description": "Gets or sets the direction in which selection occurred.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionEnd",
              "description": "Gets or sets the end position or offset of a text selection.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionStart",
              "description": "Gets or sets the starting position or offset of a text selection.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Returns or sets the element's step attribute, which works with min and max\nto limit the increments at which a numeric or date-time value can be set.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step",
              "attribute": "step",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "TextFieldType | UnsupportedTextFieldType"
              },
              "default": "'text'",
              "description": "The `<input>` type to use, defaults to \"text\". The type greatly changes how\nthe text field behaves.\n\nText fields support a limited number of `<input>` types:\n\n- text\n- textarea\n- email\n- number\n- password\n- search\n- tel\n- url\n\nSee\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types\nfor more details on each input type.",
              "attribute": "type",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Describes what, if any, type of autocomplete functionality the input\nshould provide.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",
              "attribute": "autocomplete",
              "reflects": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "description": "The text field's value as a number.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "The text field's value as a Date.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Returns true when the text field has been interacted with. Native\nvalidation errors only display in response to user interactions.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Whether or not a native error has been reported via `reportValidity()`.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "nativeErrorText",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "The validation message displayed from a native error via\n`reportValidity()`.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputOrTextarea",
              "type": {
                "text": "| HTMLInputElement\n    | HTMLTextAreaElement\n    | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "field",
              "type": {
                "text": "Field | null"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "leadingIcons",
              "type": {
                "text": "Element[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "trailingIcons",
              "type": {
                "text": "Element[]"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the text field.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Replaces a range of text with a new string.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setRangeText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number | null"
                  },
                  "description": "The offset into the text field for the start of the selection."
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number | null"
                  },
                  "description": "The offset into the text field for the end of the selection."
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  },
                  "description": "The direction in which the selection is performed."
                }
              ],
              "description": "Sets the start and end positions of a selection in the text field.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "showPicker",
              "description": "Shows the browser picker for an input element of type \"date\", \"time\", etc.\n\nFor a full list of supported types, see:\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/showPicker#browser_compatibility\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/showPicker",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepDown",
              "parameters": [
                {
                  "name": "stepDecrement",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "The number of steps to decrement, defaults to 1."
                }
              ],
              "description": "Decrements the value of a numeric type text field by `step` or `n` `step`\nnumber of times.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepDown",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepUp",
              "parameters": [
                {
                  "name": "stepIncrement",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "The number of steps to increment, defaults to 1."
                }
              ],
              "description": "Increments the value of a numeric type text field by `step` or `n` `step`\nnumber of times.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepUp",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the text field to its default value.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderField",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLeadingIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTrailingIcon",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderInputOrTextarea",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderAffix",
              "privacy": "private",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "isSuffix",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getErrorText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "redispatchEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInputOrTextarea",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInput",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleIconChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "[getFormValue]",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "[createValidator]",
              "return": {
                "type": {
                  "text": "Validator<unknown>"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "[getValidityAnchor]",
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "[onReportValidity]",
              "parameters": [
                {
                  "name": "invalidEvent",
                  "type": {
                    "text": "Event | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ScopedElementsMixin",
              "package": "@open-wc/scoped-elements/lit-element.js"
            }
          ],
          "superclass": {
            "name": "OutlinedTextField",
            "package": "@material/web/textfield/internal/outlined-text-field.js"
          },
          "tagName": "oscd-outlined-text-field",
          "customElement": true,
          "summary": "A Material Design outlined text field component.",
          "attributes": [
            {
              "name": "error",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets whether or not the text field is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "fieldName": "error",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "error-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "fieldName": "errorText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The floating Material label of the textfield component. It informs the user\nabout what information is requested for a text field. It is aligned with\nthe input text, is always visible, and it floats when focused or when text\nis entered into the textfield. This label also sets accessibilty labels,\nbut the accessible label is overriden by `aria-label`.\n\nLearn more about floating labels from the Material Design guidelines:\nhttps://m3.material.io/components/text-fields/guidelines",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "no-asterisk",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the asterisk on the floating label, when the text field is\nrequired.",
              "fieldName": "noAsterisk",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that the user must specify a value for the input before the\nowning form can be submitted and will render an error state when\n`reportValidity()` is invoked when value is empty. Additionally the\nfloating label will render an asterisk `\"*\"` when true.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the text field. It is always a string.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "prefix-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional prefix to display before the input value.",
              "fieldName": "prefixText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "suffix-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional suffix to display after the input value.",
              "fieldName": "suffixText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "has-leading-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a leading icon. Used for SSR.",
              "fieldName": "hasLeadingIcon",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "has-trailing-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the text field has a trailing icon. Used for SSR.",
              "fieldName": "hasTrailingIcon",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "supporting-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Conveys additional information below the text field, such as how it should\nbe used.",
              "fieldName": "supportingText",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "text-direction",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Override the input text CSS `direction`. Useful for RTL languages that use\nLTR notation for fractions.",
              "fieldName": "textDirection",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "The number of rows to display for a `type=\"textarea\"` text field.\nDefaults to 2.",
              "fieldName": "rows",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "cols",
              "type": {
                "text": "number"
              },
              "default": "20",
              "description": "The number of cols to display for a `type=\"textarea\"` text field.\nDefaults to 20.",
              "fieldName": "cols",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "inputMode",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "inputMode",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the greatest value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max",
              "fieldName": "max",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "maxLength",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The maximum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength",
              "fieldName": "maxLength",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "min",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the most negative value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min",
              "fieldName": "min",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "minLength",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The minimum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength",
              "fieldName": "minLength",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "no-spinner",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, hide the spinner for `type=\"number\"` text fields.",
              "fieldName": "noSpinner",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A regular expression that the text field's value must match to pass\nconstraint validation.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#pattern",
              "fieldName": "pattern",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the text displayed in the textfield when it has no value. Provides\na brief hint to the user as to the expected type of data that should be\nentered into the control. Unlike `label`, the placeholder is not visible\nand does not float when the textfield has a value.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/placeholder",
              "fieldName": "placeholder",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not a user should be able to edit the text field's\nvalue.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#readonly",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates that input accepts multiple email addresses.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple",
              "fieldName": "multiple",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "step",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Returns or sets the element's step attribute, which works with min and max\nto limit the increments at which a numeric or date-time value can be set.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step",
              "fieldName": "step",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "TextFieldType | UnsupportedTextFieldType"
              },
              "default": "'text'",
              "description": "The `<input>` type to use, defaults to \"text\". The type greatly changes how\nthe text field behaves.\n\nText fields support a limited number of `<input>` types:\n\n- text\n- textarea\n- email\n- number\n- password\n- search\n- tel\n- url\n\nSee\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types\nfor more details on each input type.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Describes what, if any, type of autocomplete functionality the input\nshould provide.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",
              "fieldName": "autocomplete",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            }
          ],
          "events": [
            {
              "description": "{Event} The native `select` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select_event) --bubbles",
              "name": "select",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "description": "{Event} The native `change` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event) --bubbles",
              "name": "change",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            },
            {
              "description": "{InputEvent} The native `input` event on [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event) --bubbles --composed",
              "name": "input",
              "inheritedFrom": {
                "name": "TextField",
                "module": "textfield/internal/text-field.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OscdOutlinedTextField",
          "declaration": {
            "name": "OscdOutlinedTextField",
            "module": "textfield/OscdOutlinedTextField.ts"
          }
        }
      ]
    }
  ]
}
